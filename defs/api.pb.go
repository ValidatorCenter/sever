// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	NilReq
	SessionID
	SeedPhrase
	AtasksOutReq
	ReturnAPITask
	TaskOne
	ResQ
	NodeTodoQ
	TodoOneQ
	BlockInfoReq
	RetJSONBlock
	Block1
	Block1Transaction
	Block1Events
	Block1Validator
	TrxInfoReq
	RetJSONTrx
	Trans1
	NodeInfoReq
	RetJSONNode
	NodeExt2
	StakesInfo
	BlocksStory
	ResReward
	BlocksListReq
	BlocksListResp
	TrxsListReq
	TrxsListResp
	NodesListResp
	CoinsListResp
	CoinView
	CoinReq
	CoinResp
	OneCoinTrans
	CoinMarketCapData
	CoinActionpData
	WalletListReq
	TasksListResp
	WalletReq
	WalletResp
	WalletCoin1
	WalletRewardsResp
	WalletDelegateResp
	Delegate
	SyncResp
	CoinBaseResp
	ActionResp
	SendCoinReq
	DelegCoinReq
	DeclareNodeReq
	StartStopNodeReq
	CreateCoinReq
	CreateCheckReq
	RedeemCheckReq
	NewNodeInfoReq
	NewCoinInfoReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import google_protobuf "google/protobuf/timestamp.pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type NilReq struct {
	Nil bool `protobuf:"varint,1,opt" json:"Nil,omitempty"`
}

func (m *NilReq) Reset()         { *m = NilReq{} }
func (m *NilReq) String() string { return proto.CompactTextString(m) }
func (*NilReq) ProtoMessage()    {}

// +---- Account
type SessionID struct {
	ID string `protobuf:"bytes,1,opt" json:"ID,omitempty"`
}

func (m *SessionID) Reset()         { *m = SessionID{} }
func (m *SessionID) String() string { return proto.CompactTextString(m) }
func (*SessionID) ProtoMessage()    {}

type SeedPhrase struct {
	Mnemonic string `protobuf:"bytes,1,opt" json:"Mnemonic,omitempty"`
}

func (m *SeedPhrase) Reset()         { *m = SeedPhrase{} }
func (m *SeedPhrase) String() string { return proto.CompactTextString(m) }
func (*SeedPhrase) ProtoMessage()    {}

// +---- ATasks-OUT
type AtasksOutReq struct {
	TokenAuth string `protobuf:"bytes,1,opt" json:"TokenAuth,omitempty"`
	PubKey    string `protobuf:"bytes,2,opt" json:"PubKey,omitempty"`
}

func (m *AtasksOutReq) Reset()         { *m = AtasksOutReq{} }
func (m *AtasksOutReq) String() string { return proto.CompactTextString(m) }
func (*AtasksOutReq) ProtoMessage()    {}

type ReturnAPITask struct {
	WalletCash float32    `protobuf:"fixed32,1,opt" json:"WalletCash,omitempty"`
	List       []*TaskOne `protobuf:"bytes,2,rep" json:"List,omitempty"`
}

func (m *ReturnAPITask) Reset()         { *m = ReturnAPITask{} }
func (m *ReturnAPITask) String() string { return proto.CompactTextString(m) }
func (*ReturnAPITask) ProtoMessage()    {}

func (m *ReturnAPITask) GetList() []*TaskOne {
	if m != nil {
		return m.List
	}
	return nil
}

// Задачи для исполнения ноде
type TaskOne struct {
	Done    bool                       `protobuf:"varint,1,opt" json:"Done,omitempty"`
	Created *google_protobuf.Timestamp `protobuf:"bytes,2,opt" json:"Created,omitempty"`
	Type    string                     `protobuf:"bytes,3,opt" json:"Type,omitempty"`
	Height  uint32                     `protobuf:"varint,4,opt" json:"Height,omitempty"`
	PubKey  string                     `protobuf:"bytes,5,opt" json:"PubKey,omitempty"`
	Address string                     `protobuf:"bytes,6,opt" json:"Address,omitempty"`
	Amount  float32                    `protobuf:"fixed32,7,opt" json:"Amount,omitempty"`
}

func (m *TaskOne) Reset()         { *m = TaskOne{} }
func (m *TaskOne) String() string { return proto.CompactTextString(m) }
func (*TaskOne) ProtoMessage()    {}

func (m *TaskOne) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// +---- ATasks-IN
// Результат принятия ответа сервера от atasks, по задачам валидатора
type ResQ struct {
	Status  int32  `protobuf:"varint,1,opt" json:"Status,omitempty"`
	Message string `protobuf:"bytes,2,opt" json:"Message,omitempty"`
}

func (m *ResQ) Reset()         { *m = ResQ{} }
func (m *ResQ) String() string { return proto.CompactTextString(m) }
func (*ResQ) ProtoMessage()    {}

// Результат выполнения задач валидатора
type NodeTodoQ struct {
	TxHash string      `protobuf:"bytes,1,opt" json:"TxHash,omitempty"`
	QList  []*TodoOneQ `protobuf:"bytes,2,rep" json:"QList,omitempty"`
}

func (m *NodeTodoQ) Reset()         { *m = NodeTodoQ{} }
func (m *NodeTodoQ) String() string { return proto.CompactTextString(m) }
func (*NodeTodoQ) ProtoMessage()    {}

func (m *NodeTodoQ) GetQList() []*TodoOneQ {
	if m != nil {
		return m.QList
	}
	return nil
}

// Идентификатор одной задачи
type TodoOneQ struct {
	Type    string                     `protobuf:"bytes,1,opt" json:"Type,omitempty"`
	Height  uint32                     `protobuf:"varint,2,opt" json:"Height,omitempty"`
	PubKey  string                     `protobuf:"bytes,3,opt" json:"PubKey,omitempty"`
	Address string                     `protobuf:"bytes,4,opt" json:"Address,omitempty"`
	Created *google_protobuf.Timestamp `protobuf:"bytes,5,opt" json:"Created,omitempty"`
	Amount  float32                    `protobuf:"fixed32,6,opt" json:"Amount,omitempty"`
}

func (m *TodoOneQ) Reset()         { *m = TodoOneQ{} }
func (m *TodoOneQ) String() string { return proto.CompactTextString(m) }
func (*TodoOneQ) ProtoMessage()    {}

func (m *TodoOneQ) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// +---- Block-1
type BlockInfoReq struct {
	Number uint32 `protobuf:"varint,1,opt" json:"Number,omitempty"`
}

func (m *BlockInfoReq) Reset()         { *m = BlockInfoReq{} }
func (m *BlockInfoReq) String() string { return proto.CompactTextString(m) }
func (*BlockInfoReq) ProtoMessage()    {}

// Структура возврата блока в виде JSON
type RetJSONBlock struct {
	Status bool    `protobuf:"varint,1,opt" json:"Status,omitempty"`
	Block  *Block1 `protobuf:"bytes,2,opt" json:"Block,omitempty"`
	ErrMsg string  `protobuf:"bytes,3,opt" json:"ErrMsg,omitempty"`
}

func (m *RetJSONBlock) Reset()         { *m = RetJSONBlock{} }
func (m *RetJSONBlock) String() string { return proto.CompactTextString(m) }
func (*RetJSONBlock) ProtoMessage()    {}

func (m *RetJSONBlock) GetBlock() *Block1 {
	if m != nil {
		return m.Block
	}
	return nil
}

// Структура одного блока для вывода на страницу
type Block1 struct {
	Hash             string                     `protobuf:"bytes,1,opt" json:"Hash,omitempty"`
	HashMin          string                     `protobuf:"bytes,2,opt" json:"HashMin,omitempty"`
	Height           int32                      `protobuf:"varint,3,opt" json:"Height,omitempty"`
	Time             *google_protobuf.Timestamp `protobuf:"bytes,4,opt" json:"Time,omitempty"`
	Age              string                     `protobuf:"bytes,5,opt" json:"Age,omitempty"`
	NumTxs           int32                      `protobuf:"varint,6,opt" json:"NumTxs,omitempty"`
	TotalTxs         int32                      `protobuf:"varint,7,opt" json:"TotalTxs,omitempty"`
	Transactions     []*Block1Transaction       `protobuf:"bytes,8,rep" json:"Transactions,omitempty"`
	Events           []*Block1Events            `protobuf:"bytes,9,rep" json:"Events,omitempty"`
	Validators       []*Block1Validator         `protobuf:"bytes,10,rep" json:"Validators,omitempty"`
	Proposer         string                     `protobuf:"bytes,11,opt" json:"Proposer,omitempty"`
	ProposerName     string                     `protobuf:"bytes,12,opt" json:"ProposerName,omitempty"`
	ProposerLogo     string                     `protobuf:"bytes,13,opt" json:"ProposerLogo,omitempty"`
	BlockReward      float32                    `protobuf:"fixed32,14,opt" json:"BlockReward,omitempty"`
	Size             int32                      `protobuf:"varint,15,opt" json:"Size,omitempty"`
	TransactionsAmnt int32                      `protobuf:"varint,16,opt" json:"TransactionsAmnt,omitempty"`
	EventsAmnt       int32                      `protobuf:"varint,17,opt" json:"EventsAmnt,omitempty"`
	PrecommitsAmnt   int32                      `protobuf:"varint,18,opt" json:"PrecommitsAmnt,omitempty"`
}

func (m *Block1) Reset()         { *m = Block1{} }
func (m *Block1) String() string { return proto.CompactTextString(m) }
func (*Block1) ProtoMessage()    {}

func (m *Block1) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Block1) GetTransactions() []*Block1Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block1) GetEvents() []*Block1Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Block1) GetValidators() []*Block1Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

// Структура одной транзакции в блоке для вывода на страницу
type Block1Transaction struct {
	Hash     string  `protobuf:"bytes,1,opt" json:"Hash,omitempty"`
	HashMin  string  `protobuf:"bytes,2,opt" json:"HashMin,omitempty"`
	From     string  `protobuf:"bytes,3,opt" json:"From,omitempty"`
	FromMin  string  `protobuf:"bytes,4,opt" json:"FromMin,omitempty"`
	Nonce    int32   `protobuf:"varint,5,opt" json:"Nonce,omitempty"`
	GasPrice int32   `protobuf:"varint,6,opt" json:"GasPrice,omitempty"`
	Type     int32   `protobuf:"varint,7,opt" json:"Type,omitempty"`
	TypeTxt  string  `protobuf:"bytes,8,opt" json:"TypeTxt,omitempty"`
	Amount   float32 `protobuf:"fixed32,9,opt" json:"Amount,omitempty"`
	Payload  string  `protobuf:"bytes,10,opt" json:"Payload,omitempty"`
	Gas      int32   `protobuf:"varint,11,opt" json:"Gas,omitempty"`
	GasCoin  string  `protobuf:"bytes,12,opt" json:"GasCoin,omitempty"`
	GasUsed  int32   `protobuf:"varint,13,opt" json:"GasUsed,omitempty"`
}

func (m *Block1Transaction) Reset()         { *m = Block1Transaction{} }
func (m *Block1Transaction) String() string { return proto.CompactTextString(m) }
func (*Block1Transaction) ProtoMessage()    {}

// Структура одного события в блоке для вывода на страницу
type Block1Events struct {
	Type               string  `protobuf:"bytes,1,opt" json:"Type,omitempty"`
	TypeTxt            string  `protobuf:"bytes,2,opt" json:"TypeTxt,omitempty"`
	Role               string  `protobuf:"bytes,3,opt" json:"Role,omitempty"`
	Address            string  `protobuf:"bytes,4,opt" json:"Address,omitempty"`
	AddressMin         string  `protobuf:"bytes,5,opt" json:"AddressMin,omitempty"`
	Amount             float32 `protobuf:"fixed32,6,opt" json:"Amount,omitempty"`
	Coin               string  `protobuf:"bytes,7,opt" json:"Coin,omitempty"`
	ValidatorPubKey    string  `protobuf:"bytes,8,opt" json:"ValidatorPubKey,omitempty"`
	ValidatorPubKeyMin string  `protobuf:"bytes,9,opt" json:"ValidatorPubKeyMin,omitempty"`
}

func (m *Block1Events) Reset()         { *m = Block1Events{} }
func (m *Block1Events) String() string { return proto.CompactTextString(m) }
func (*Block1Events) ProtoMessage()    {}

// Структура одного валидатор в блоке для вывода на страницу
type Block1Validator struct {
	PubKey string `protobuf:"bytes,1,opt" json:"PubKey,omitempty"`
	Signed bool   `protobuf:"varint,2,opt" json:"Signed,omitempty"`
	Name   string `protobuf:"bytes,3,opt" json:"Name,omitempty"`
	Logo   string `protobuf:"bytes,4,opt" json:"Logo,omitempty"`
}

func (m *Block1Validator) Reset()         { *m = Block1Validator{} }
func (m *Block1Validator) String() string { return proto.CompactTextString(m) }
func (*Block1Validator) ProtoMessage()    {}

// +---- Trx-1
type TrxInfoReq struct {
	Number string `protobuf:"bytes,1,opt" json:"Number,omitempty"`
}

func (m *TrxInfoReq) Reset()         { *m = TrxInfoReq{} }
func (m *TrxInfoReq) String() string { return proto.CompactTextString(m) }
func (*TrxInfoReq) ProtoMessage()    {}

// Структура возврата транзакции в виде JSON
type RetJSONTrx struct {
	Status bool    `protobuf:"varint,1,opt" json:"Status,omitempty"`
	Trx    *Trans1 `protobuf:"bytes,2,opt" json:"Trx,omitempty"`
	ErrMsg string  `protobuf:"bytes,3,opt" json:"ErrMsg,omitempty"`
}

func (m *RetJSONTrx) Reset()         { *m = RetJSONTrx{} }
func (m *RetJSONTrx) String() string { return proto.CompactTextString(m) }
func (*RetJSONTrx) ProtoMessage()    {}

func (m *RetJSONTrx) GetTrx() *Trans1 {
	if m != nil {
		return m.Trx
	}
	return nil
}

type Trans1 struct {
	Status       string  `protobuf:"bytes,1,opt" json:"Status,omitempty"`
	Hash         string  `protobuf:"bytes,2,opt" json:"Hash,omitempty"`
	HashMin      string  `protobuf:"bytes,3,opt" json:"HashMin,omitempty"`
	Height       int32   `protobuf:"varint,4,opt" json:"Height,omitempty"`
	Index        int32   `protobuf:"varint,5,opt" json:"Index,omitempty"`
	From         string  `protobuf:"bytes,6,opt" json:"From,omitempty"`
	FromMin      string  `protobuf:"bytes,7,opt" json:"FromMin,omitempty"`
	Nonce        int32   `protobuf:"varint,8,opt" json:"Nonce,omitempty"`
	GasPrice     int32   `protobuf:"varint,9,opt" json:"GasPrice,omitempty"`
	GasCoin      string  `protobuf:"bytes,10,opt" json:"GasCoin,omitempty"`
	GasUsed      int32   `protobuf:"varint,11,opt" json:"GasUsed,omitempty"`
	GasFee       float32 `protobuf:"fixed32,12,opt" json:"GasFee,omitempty"`
	Type         int32   `protobuf:"varint,13,opt" json:"Type,omitempty"`
	TypeTxt      string  `protobuf:"bytes,14,opt" json:"TypeTxt,omitempty"`
	Payload      string  `protobuf:"bytes,15,opt" json:"Payload,omitempty"`
	Code         int32   `protobuf:"varint,16,opt" json:"Code,omitempty"`
	Log          string  `protobuf:"bytes,17,opt" json:"Log,omitempty"`
	Amount       float32 `protobuf:"fixed32,18,opt" json:"Amount,omitempty"`
	TxCoinToBuy  string  `protobuf:"bytes,19,opt" json:"TxCoinToBuy,omitempty"`
	TxCoinToSell string  `protobuf:"bytes,20,opt" json:"TxCoinToSell,omitempty"`
	TxFrom       string  `protobuf:"bytes,21,opt" json:"TxFrom,omitempty"`
	TxReturn     float32 `protobuf:"fixed32,22,opt" json:"TxReturn,omitempty"`
	TxSellAmount float32 `protobuf:"fixed32,23,opt" json:"TxSellAmount,omitempty"`
}

func (m *Trans1) Reset()         { *m = Trans1{} }
func (m *Trans1) String() string { return proto.CompactTextString(m) }
func (*Trans1) ProtoMessage()    {}

// +---- Node-1
type NodeInfoReq struct {
	Number string `protobuf:"bytes,1,opt" json:"Number,omitempty"`
}

func (m *NodeInfoReq) Reset()         { *m = NodeInfoReq{} }
func (m *NodeInfoReq) String() string { return proto.CompactTextString(m) }
func (*NodeInfoReq) ProtoMessage()    {}

// Структура возврата блока в виде JSON
type RetJSONNode struct {
	Status  bool         `protobuf:"varint,1,opt" json:"Status,omitempty"`
	Node    *NodeExt2    `protobuf:"bytes,2,opt" json:"Node,omitempty"`
	Rewards []*ResReward `protobuf:"bytes,3,rep" json:"Rewards,omitempty"`
	ErrMsg  string       `protobuf:"bytes,4,opt" json:"ErrMsg,omitempty"`
}

func (m *RetJSONNode) Reset()         { *m = RetJSONNode{} }
func (m *RetJSONNode) String() string { return proto.CompactTextString(m) }
func (*RetJSONNode) ProtoMessage()    {}

func (m *RetJSONNode) GetNode() *NodeExt2 {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *RetJSONNode) GetRewards() []*ResReward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type NodeExt2 struct {
	ValidatorName    string                     `protobuf:"bytes,1,opt" json:"ValidatorName,omitempty"`
	ValidatorURL     string                     `protobuf:"bytes,2,opt" json:"ValidatorURL,omitempty"`
	ValidatorLogoImg string                     `protobuf:"bytes,3,opt" json:"ValidatorLogoImg,omitempty"`
	ValidatorDesc    string                     `protobuf:"bytes,4,opt" json:"ValidatorDesc,omitempty"`
	Uptime           float32                    `protobuf:"fixed32,5,opt" json:"Uptime,omitempty"`
	Created          *google_protobuf.Timestamp `protobuf:"bytes,6,opt" json:"Created,omitempty"`
	RewardAddress    string                     `protobuf:"bytes,7,opt" json:"RewardAddress,omitempty"`
	OwnerAddress     string                     `protobuf:"bytes,8,opt" json:"OwnerAddress,omitempty"`
	TotalStake       float32                    `protobuf:"fixed32,9,opt" json:"TotalStake,omitempty"`
	PubKey           string                     `protobuf:"bytes,10,opt" json:"PubKey,omitempty"`
	PubKeyMin        string                     `protobuf:"bytes,11,opt" json:"PubKeyMin,omitempty"`
	ValidatorAddress string                     `protobuf:"bytes,12,opt" json:"ValidatorAddress,omitempty"`
	Commission       int32                      `protobuf:"varint,13,opt" json:"Commission,omitempty"`
	CreatedAtBlock   int32                      `protobuf:"varint,14,opt" json:"CreatedAtBlock,omitempty"`
	StatusInt        int32                      `protobuf:"varint,15,opt" json:"StatusInt,omitempty"`
	TimeUpdate       *google_protobuf.Timestamp `protobuf:"bytes,16,opt" json:"TimeUpdate,omitempty"`
	Stakes           []*StakesInfo              `protobuf:"bytes,17,rep" json:"Stakes,omitempty"`
	Blocks           []*BlocksStory             `protobuf:"bytes,18,rep" json:"Blocks,omitempty"`
	AmntBlocks       uint64                     `protobuf:"varint,19,opt" json:"AmntBlocks,omitempty"`
	AmntSlashed      int32                      `protobuf:"varint,20,opt" json:"AmntSlashed,omitempty"`
	AmnNoBlocks      int32                      `protobuf:"varint,21,opt" json:"AmnNoBlocks,omitempty"`
	AmntSlots        int32                      `protobuf:"varint,22,opt" json:"AmntSlots,omitempty"`
	CommissionNow    int32                      `protobuf:"varint,23,opt" json:"CommissionNow,omitempty"`
}

func (m *NodeExt2) Reset()         { *m = NodeExt2{} }
func (m *NodeExt2) String() string { return proto.CompactTextString(m) }
func (*NodeExt2) ProtoMessage()    {}

func (m *NodeExt2) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *NodeExt2) GetTimeUpdate() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeUpdate
	}
	return nil
}

func (m *NodeExt2) GetStakes() []*StakesInfo {
	if m != nil {
		return m.Stakes
	}
	return nil
}

func (m *NodeExt2) GetBlocks() []*BlocksStory {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// стэк кандидата/валидатора в каких монетах
type StakesInfo struct {
	Owner    string  `protobuf:"bytes,1,opt" json:"Owner,omitempty"`
	Coin     string  `protobuf:"bytes,2,opt" json:"Coin,omitempty"`
	Value    float32 `protobuf:"fixed32,3,opt" json:"Value,omitempty"`
	BipValue float32 `protobuf:"fixed32,4,opt" json:"BipValue,omitempty"`
}

func (m *StakesInfo) Reset()         { *m = StakesInfo{} }
func (m *StakesInfo) String() string { return proto.CompactTextString(m) }
func (*StakesInfo) ProtoMessage()    {}

type BlocksStory struct {
	ID   uint32 `protobuf:"varint,1,opt" json:"ID,omitempty"`
	Type string `protobuf:"bytes,2,opt" json:"Type,omitempty"`
}

func (m *BlocksStory) Reset()         { *m = BlocksStory{} }
func (m *BlocksStory) String() string { return proto.CompactTextString(m) }
func (*BlocksStory) ProtoMessage()    {}

// Награда
type ResReward struct {
	Role    string  `protobuf:"bytes,1,opt" json:"Role,omitempty"`
	Address string  `protobuf:"bytes,2,opt" json:"Address,omitempty"`
	PubKey  string  `protobuf:"bytes,3,opt" json:"PubKey,omitempty"`
	Amnt    float32 `protobuf:"fixed32,4,opt" json:"Amnt,omitempty"`
}

func (m *ResReward) Reset()         { *m = ResReward{} }
func (m *ResReward) String() string { return proto.CompactTextString(m) }
func (*ResReward) ProtoMessage()    {}

// +---- Blocks-List
type BlocksListReq struct {
	Page uint32 `protobuf:"varint,1,opt" json:"Page,omitempty"`
}

func (m *BlocksListReq) Reset()         { *m = BlocksListReq{} }
func (m *BlocksListReq) String() string { return proto.CompactTextString(m) }
func (*BlocksListReq) ProtoMessage()    {}

type BlocksListResp struct {
	AllBlocks []*Block1 `protobuf:"bytes,1,rep" json:"AllBlocks,omitempty"`
	// Доп.инфа по кол.блоков
	TotalBlock uint32 `protobuf:"varint,2,opt" json:"TotalBlock,omitempty"`
	MinBlock   uint32 `protobuf:"varint,3,opt" json:"MinBlock,omitempty"`
	MaxBlock   uint32 `protobuf:"varint,4,opt" json:"MaxBlock,omitempty"`
	// Кнопки навигации по страницам:
	BtnLL uint32 `protobuf:"varint,5,opt" json:"BtnLL,omitempty"`
	BtnL  uint32 `protobuf:"varint,6,opt" json:"BtnL,omitempty"`
	BtnR  uint32 `protobuf:"varint,7,opt" json:"BtnR,omitempty"`
	BtnRR uint32 `protobuf:"varint,8,opt" json:"BtnRR,omitempty"`
}

func (m *BlocksListResp) Reset()         { *m = BlocksListResp{} }
func (m *BlocksListResp) String() string { return proto.CompactTextString(m) }
func (*BlocksListResp) ProtoMessage()    {}

func (m *BlocksListResp) GetAllBlocks() []*Block1 {
	if m != nil {
		return m.AllBlocks
	}
	return nil
}

// +---- Trxs-List
type TrxsListReq struct {
	Page uint32 `protobuf:"varint,1,opt" json:"Page,omitempty"`
}

func (m *TrxsListReq) Reset()         { *m = TrxsListReq{} }
func (m *TrxsListReq) String() string { return proto.CompactTextString(m) }
func (*TrxsListReq) ProtoMessage()    {}

type TrxsListResp struct {
	AllTrns []*Trans1 `protobuf:"bytes,1,rep" json:"AllTrns,omitempty"`
	// Доп.инфа по кол.блоков
	TotalBlock uint32 `protobuf:"varint,2,opt" json:"TotalBlock,omitempty"`
	// Кнопки навигации по страницам:
	BtnNow uint32 `protobuf:"varint,3,opt" json:"BtnNow,omitempty"`
	BtnL   uint32 `protobuf:"varint,4,opt" json:"BtnL,omitempty"`
	BtnR   uint32 `protobuf:"varint,5,opt" json:"BtnR,omitempty"`
	BtnRR  uint32 `protobuf:"varint,6,opt" json:"BtnRR,omitempty"`
}

func (m *TrxsListResp) Reset()         { *m = TrxsListResp{} }
func (m *TrxsListResp) String() string { return proto.CompactTextString(m) }
func (*TrxsListResp) ProtoMessage()    {}

func (m *TrxsListResp) GetAllTrns() []*Trans1 {
	if m != nil {
		return m.AllTrns
	}
	return nil
}

// +---- Nodes-List
type NodesListResp struct {
	AllCandidates []*NodeExt2 `protobuf:"bytes,1,rep" json:"AllCandidates,omitempty"`
}

func (m *NodesListResp) Reset()         { *m = NodesListResp{} }
func (m *NodesListResp) String() string { return proto.CompactTextString(m) }
func (*NodesListResp) ProtoMessage()    {}

func (m *NodesListResp) GetAllCandidates() []*NodeExt2 {
	if m != nil {
		return m.AllCandidates
	}
	return nil
}

// +---- Coins-List
type CoinsListResp struct {
	AllCoins []*CoinView `protobuf:"bytes,1,rep" json:"AllCoins,omitempty"`
}

func (m *CoinsListResp) Reset()         { *m = CoinsListResp{} }
func (m *CoinsListResp) String() string { return proto.CompactTextString(m) }
func (*CoinsListResp) ProtoMessage()    {}

func (m *CoinsListResp) GetAllCoins() []*CoinView {
	if m != nil {
		return m.AllCoins
	}
	return nil
}

type CoinView struct {
	ID          int32   `protobuf:"varint,1,opt" json:"ID,omitempty"`
	Name        string  `protobuf:"bytes,2,opt" json:"Name,omitempty"`
	Ticker      string  `protobuf:"bytes,3,opt" json:"Ticker,omitempty"`
	CoinLogoImg string  `protobuf:"bytes,4,opt" json:"CoinLogoImg,omitempty"`
	PriceBuy    string  `protobuf:"bytes,5,opt" json:"PriceBuy,omitempty"`
	PriceBuyUSD string  `protobuf:"bytes,6,opt" json:"PriceBuyUSD,omitempty"`
	Volume24    string  `protobuf:"bytes,7,opt" json:"Volume24,omitempty"`
	Change24    string  `protobuf:"bytes,8,opt" json:"Change24,omitempty"`
	Change24F32 float32 `protobuf:"fixed32,9,opt,name=Change24f32" json:"Change24f32,omitempty"`
}

func (m *CoinView) Reset()         { *m = CoinView{} }
func (m *CoinView) String() string { return proto.CompactTextString(m) }
func (*CoinView) ProtoMessage()    {}

// +---- Coin-1p
type CoinReq struct {
	Ticker1 string `protobuf:"bytes,1,opt" json:"Ticker1,omitempty"`
	Ticker2 string `protobuf:"bytes,2,opt" json:"Ticker2,omitempty"`
}

func (m *CoinReq) Reset()         { *m = CoinReq{} }
func (m *CoinReq) String() string { return proto.CompactTextString(m) }
func (*CoinReq) ProtoMessage()    {}

type CoinResp struct {
	UpdateData     *google_protobuf.Timestamp `protobuf:"bytes,1,opt" json:"UpdateData,omitempty"`
	Time           *google_protobuf.Timestamp `protobuf:"bytes,2,opt" json:"Time,omitempty"`
	TitleCoin      string                     `protobuf:"bytes,3,opt" json:"TitleCoin,omitempty"`
	Transactions   []*OneCoinTrans            `protobuf:"bytes,4,rep" json:"Transactions,omitempty"`
	Ticker1        string                     `protobuf:"bytes,5,opt" json:"Ticker1,omitempty"`
	Ticker2        string                     `protobuf:"bytes,6,opt" json:"Ticker2,omitempty"`
	Other2Coins    []string                   `protobuf:"bytes,7,rep" json:"Other2Coins,omitempty"`
	PriceNowBuy    string                     `protobuf:"bytes,8,opt" json:"PriceNowBuy,omitempty"`
	PriceNowSell   string                     `protobuf:"bytes,9,opt" json:"PriceNowSell,omitempty"`
	Change24       float32                    `protobuf:"fixed32,10,opt" json:"Change24,omitempty"`
	Volume24       float32                    `protobuf:"fixed32,11,opt" json:"Volume24,omitempty"`
	MyCoin         bool                       `protobuf:"varint,12,opt" json:"MyCoin,omitempty"`
	Creator        string                     `protobuf:"bytes,13,opt" json:"Creator,omitempty"`
	CreatorTXT     string                     `protobuf:"bytes,14,opt" json:"CreatorTXT,omitempty"`
	CRRPrc         int32                      `protobuf:"varint,15,opt,name=CRR_prc" json:"CRR_prc,omitempty"`
	InitialAmount  string                     `protobuf:"bytes,16,opt" json:"InitialAmount,omitempty"`
	InitialReserve string                     `protobuf:"bytes,17,opt" json:"InitialReserve,omitempty"`
	Volume         float32                    `protobuf:"fixed32,18,opt" json:"Volume,omitempty"`
	ReserveBalance string                     `protobuf:"bytes,19,opt" json:"ReserveBalance,omitempty"`
	CoinInf        *CoinMarketCapData         `protobuf:"bytes,20,opt" json:"CoinInf,omitempty"`
}

func (m *CoinResp) Reset()         { *m = CoinResp{} }
func (m *CoinResp) String() string { return proto.CompactTextString(m) }
func (*CoinResp) ProtoMessage()    {}

func (m *CoinResp) GetUpdateData() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateData
	}
	return nil
}

func (m *CoinResp) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CoinResp) GetTransactions() []*OneCoinTrans {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *CoinResp) GetCoinInf() *CoinMarketCapData {
	if m != nil {
		return m.CoinInf
	}
	return nil
}

// Структура Японской-Свечки для графиков
type OneCoinTrans struct {
	Date   string  `protobuf:"bytes,1,opt" json:"Date,omitempty"`
	Open   float32 `protobuf:"fixed32,2,opt" json:"Open,omitempty"`
	High   float32 `protobuf:"fixed32,3,opt" json:"High,omitempty"`
	Low    float32 `protobuf:"fixed32,4,opt" json:"Low,omitempty"`
	Close  float32 `protobuf:"fixed32,5,opt" json:"Close,omitempty"`
	Volume float32 `protobuf:"fixed32,6,opt" json:"Volume,omitempty"`
}

func (m *OneCoinTrans) Reset()         { *m = OneCoinTrans{} }
func (m *OneCoinTrans) String() string { return proto.CompactTextString(m) }
func (*OneCoinTrans) ProtoMessage()    {}

// Информация о монете
type CoinMarketCapData struct {
	Name                 string                     `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	CoinSymbol           string                     `protobuf:"bytes,2,opt" json:"CoinSymbol,omitempty"`
	CoinURL              string                     `protobuf:"bytes,3,opt" json:"CoinURL,omitempty"`
	CoinLogoImg          string                     `protobuf:"bytes,4,opt" json:"CoinLogoImg,omitempty"`
	CoinDesc             string                     `protobuf:"bytes,5,opt" json:"CoinDesc,omitempty"`
	Time                 *google_protobuf.Timestamp `protobuf:"bytes,6,opt" json:"Time,omitempty"`
	TimeUpdate           *google_protobuf.Timestamp `protobuf:"bytes,7,opt" json:"TimeUpdate,omitempty"`
	InitialAmount        float32                    `protobuf:"fixed32,8,opt" json:"InitialAmount,omitempty"`
	InitialReserve       float32                    `protobuf:"fixed32,9,opt" json:"InitialReserve,omitempty"`
	ConstantReserveRatio int32                      `protobuf:"varint,10,opt" json:"ConstantReserveRatio,omitempty"`
	VolumeNow            float32                    `protobuf:"fixed32,11,opt" json:"VolumeNow,omitempty"`
	ReserveBalanceNow    float32                    `protobuf:"fixed32,12,opt" json:"ReserveBalanceNow,omitempty"`
	Creator              string                     `protobuf:"bytes,13,opt" json:"Creator,omitempty"`
	AmntTrans24X7        int32                      `protobuf:"varint,14,opt,name=AmntTrans24x7" json:"AmntTrans24x7,omitempty"`
	Transactions         []*CoinActionpData         `protobuf:"bytes,15,rep" json:"Transactions,omitempty"`
}

func (m *CoinMarketCapData) Reset()         { *m = CoinMarketCapData{} }
func (m *CoinMarketCapData) String() string { return proto.CompactTextString(m) }
func (*CoinMarketCapData) ProtoMessage()    {}

func (m *CoinMarketCapData) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *CoinMarketCapData) GetTimeUpdate() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeUpdate
	}
	return nil
}

func (m *CoinMarketCapData) GetTransactions() []*CoinActionpData {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Движение монеты
type CoinActionpData struct {
	Hash        string                     `protobuf:"bytes,1,opt" json:"Hash,omitempty"`
	Time        *google_protobuf.Timestamp `protobuf:"bytes,2,opt" json:"Time,omitempty"`
	Type        int32                      `protobuf:"varint,3,opt" json:"Type,omitempty"`
	CoinToBuy   string                     `protobuf:"bytes,4,opt" json:"CoinToBuy,omitempty"`
	CoinToSell  string                     `protobuf:"bytes,5,opt" json:"CoinToSell,omitempty"`
	ValueToBuy  float32                    `protobuf:"fixed32,6,opt" json:"ValueToBuy,omitempty"`
	ValueToSell float32                    `protobuf:"fixed32,7,opt" json:"ValueToSell,omitempty"`
	Price       float32                    `protobuf:"fixed32,8,opt" json:"Price,omitempty"`
	Volume      float32                    `protobuf:"fixed32,9,opt" json:"Volume,omitempty"`
}

func (m *CoinActionpData) Reset()         { *m = CoinActionpData{} }
func (m *CoinActionpData) String() string { return proto.CompactTextString(m) }
func (*CoinActionpData) ProtoMessage()    {}

func (m *CoinActionpData) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// +---- Tasks-List
type WalletListReq struct {
	Wallet string `protobuf:"bytes,1,opt" json:"Wallet,omitempty"`
	Page   uint32 `protobuf:"varint,2,opt" json:"Page,omitempty"`
}

func (m *WalletListReq) Reset()         { *m = WalletListReq{} }
func (m *WalletListReq) String() string { return proto.CompactTextString(m) }
func (*WalletListReq) ProtoMessage()    {}

type TasksListResp struct {
	List []*TaskOne `protobuf:"bytes,1,rep" json:"List,omitempty"`
	// Кнопки навигации по страницам:
	BtnNow uint32 `protobuf:"varint,2,opt" json:"BtnNow,omitempty"`
	BtnL   uint32 `protobuf:"varint,3,opt" json:"BtnL,omitempty"`
	BtnR   uint32 `protobuf:"varint,4,opt" json:"BtnR,omitempty"`
	BtnRR  uint32 `protobuf:"varint,5,opt" json:"BtnRR,omitempty"`
}

func (m *TasksListResp) Reset()         { *m = TasksListResp{} }
func (m *TasksListResp) String() string { return proto.CompactTextString(m) }
func (*TasksListResp) ProtoMessage()    {}

func (m *TasksListResp) GetList() []*TaskOne {
	if m != nil {
		return m.List
	}
	return nil
}

// +---- Wallet-1
type WalletReq struct {
	Wallet string `protobuf:"bytes,1,opt" json:"Wallet,omitempty"`
}

func (m *WalletReq) Reset()         { *m = WalletReq{} }
func (m *WalletReq) String() string { return proto.CompactTextString(m) }
func (*WalletReq) ProtoMessage()    {}

type WalletResp struct {
	WalletCoins         []*WalletCoin1 `protobuf:"bytes,1,rep" json:"WalletCoins,omitempty"`
	TotalAmntInBaseCoin uint32         `protobuf:"varint,2,opt" json:"TotalAmntInBaseCoin,omitempty"`
}

func (m *WalletResp) Reset()         { *m = WalletResp{} }
func (m *WalletResp) String() string { return proto.CompactTextString(m) }
func (*WalletResp) ProtoMessage()    {}

func (m *WalletResp) GetWalletCoins() []*WalletCoin1 {
	if m != nil {
		return m.WalletCoins
	}
	return nil
}

type WalletCoin1 struct {
	Ticker string  `protobuf:"bytes,1,opt" json:"Ticker,omitempty"`
	Amnt   float32 `protobuf:"fixed32,2,opt" json:"Amnt,omitempty"`
}

func (m *WalletCoin1) Reset()         { *m = WalletCoin1{} }
func (m *WalletCoin1) String() string { return proto.CompactTextString(m) }
func (*WalletCoin1) ProtoMessage()    {}

type WalletRewardsResp struct {
	AllReward   []*ResReward `protobuf:"bytes,1,rep" json:"AllReward,omitempty"`
	TotalReward float32      `protobuf:"fixed32,2,opt" json:"TotalReward,omitempty"`
}

func (m *WalletRewardsResp) Reset()         { *m = WalletRewardsResp{} }
func (m *WalletRewardsResp) String() string { return proto.CompactTextString(m) }
func (*WalletRewardsResp) ProtoMessage()    {}

func (m *WalletRewardsResp) GetAllReward() []*ResReward {
	if m != nil {
		return m.AllReward
	}
	return nil
}

type WalletDelegateResp struct {
	AllDeleg      []*Delegate `protobuf:"bytes,1,rep" json:"AllDeleg,omitempty"`
	TotalDelegate float32     `protobuf:"fixed32,2,opt" json:"TotalDelegate,omitempty"`
}

func (m *WalletDelegateResp) Reset()         { *m = WalletDelegateResp{} }
func (m *WalletDelegateResp) String() string { return proto.CompactTextString(m) }
func (*WalletDelegateResp) ProtoMessage()    {}

func (m *WalletDelegateResp) GetAllDeleg() []*Delegate {
	if m != nil {
		return m.AllDeleg
	}
	return nil
}

type Delegate struct {
	Validator    string  `protobuf:"bytes,1,opt" json:"Validator,omitempty"`
	ValidatorMin string  `protobuf:"bytes,2,opt" json:"ValidatorMin,omitempty"`
	Coin         string  `protobuf:"bytes,3,opt" json:"Coin,omitempty"`
	Value        float32 `protobuf:"fixed32,4,opt" json:"Value,omitempty"`
	ValueBip     float32 `protobuf:"fixed32,5,opt" json:"ValueBip,omitempty"`
}

func (m *Delegate) Reset()         { *m = Delegate{} }
func (m *Delegate) String() string { return proto.CompactTextString(m) }
func (*Delegate) ProtoMessage()    {}

// +---- Sync
type SyncResp struct {
	LastSync uint32 `protobuf:"varint,1,opt" json:"LastSync,omitempty"`
	Current  uint32 `protobuf:"varint,2,opt" json:"Current,omitempty"`
	ChainNet string `protobuf:"bytes,3,opt" json:"ChainNet,omitempty"`
}

func (m *SyncResp) Reset()         { *m = SyncResp{} }
func (m *SyncResp) String() string { return proto.CompactTextString(m) }
func (*SyncResp) ProtoMessage()    {}

// +---- BIP/MNT
type CoinBaseResp struct {
	Ticker string `protobuf:"bytes,1,opt" json:"Ticker,omitempty"`
}

func (m *CoinBaseResp) Reset()         { *m = CoinBaseResp{} }
func (m *CoinBaseResp) String() string { return proto.CompactTextString(m) }
func (*CoinBaseResp) ProtoMessage()    {}

// +---- Wallet-Action
// Результат выполнения операции
type ActionResp struct {
	Status  bool   `protobuf:"varint,1,opt" json:"Status,omitempty"`
	TrxHash string `protobuf:"bytes,2,opt" json:"TrxHash,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt" json:"ErrMsg,omitempty"`
}

func (m *ActionResp) Reset()         { *m = ActionResp{} }
func (m *ActionResp) String() string { return proto.CompactTextString(m) }
func (*ActionResp) ProtoMessage()    {}

type SendCoinReq struct {
	Address string  `protobuf:"bytes,1,opt" json:"Address,omitempty"`
	Coin    string  `protobuf:"bytes,2,opt" json:"Coin,omitempty"`
	FeeCoin string  `protobuf:"bytes,3,opt" json:"FeeCoin,omitempty"`
	Value   float32 `protobuf:"fixed32,4,opt" json:"Value,omitempty"`
}

func (m *SendCoinReq) Reset()         { *m = SendCoinReq{} }
func (m *SendCoinReq) String() string { return proto.CompactTextString(m) }
func (*SendCoinReq) ProtoMessage()    {}

type DelegCoinReq struct {
	DelegCoin  string  `protobuf:"bytes,1,opt" json:"DelegCoin,omitempty"`
	Validator  string  `protobuf:"bytes,2,opt" json:"Validator,omitempty"`
	ValueDeleg float32 `protobuf:"fixed32,3,opt" json:"ValueDeleg,omitempty"`
	FeeCoin    string  `protobuf:"bytes,4,opt" json:"FeeCoin,omitempty"`
}

func (m *DelegCoinReq) Reset()         { *m = DelegCoinReq{} }
func (m *DelegCoinReq) String() string { return proto.CompactTextString(m) }
func (*DelegCoinReq) ProtoMessage()    {}

type DeclareNodeReq struct {
	Validator  string `protobuf:"bytes,1,opt" json:"Validator,omitempty"`
	Comm       uint32 `protobuf:"varint,2,opt" json:"Comm,omitempty"`
	TaxCoin    string `protobuf:"bytes,3,opt" json:"TaxCoin,omitempty"`
	ValueStart int64  `protobuf:"varint,4,opt" json:"ValueStart,omitempty"`
	FeeCoin    string `protobuf:"bytes,5,opt" json:"FeeCoin,omitempty"`
}

func (m *DeclareNodeReq) Reset()         { *m = DeclareNodeReq{} }
func (m *DeclareNodeReq) String() string { return proto.CompactTextString(m) }
func (*DeclareNodeReq) ProtoMessage()    {}

type StartStopNodeReq struct {
	Validator string `protobuf:"bytes,1,opt" json:"Validator,omitempty"`
	OnOff     bool   `protobuf:"varint,2,opt" json:"OnOff,omitempty"`
	FeeCoin   string `protobuf:"bytes,3,opt" json:"FeeCoin,omitempty"`
}

func (m *StartStopNodeReq) Reset()         { *m = StartStopNodeReq{} }
func (m *StartStopNodeReq) String() string { return proto.CompactTextString(m) }
func (*StartStopNodeReq) ProtoMessage()    {}

type CreateCoinReq struct {
	NameCoin   string `protobuf:"bytes,1,opt" json:"NameCoin,omitempty"`
	TickerCoin string `protobuf:"bytes,2,opt" json:"TickerCoin,omitempty"`
	InitAmnt   int64  `protobuf:"varint,3,opt" json:"InitAmnt,omitempty"`
	InitResrv  int64  `protobuf:"varint,4,opt" json:"InitResrv,omitempty"`
	CRR        uint32 `protobuf:"varint,5,opt" json:"CRR,omitempty"`
	FeeCoin    string `protobuf:"bytes,6,opt" json:"FeeCoin,omitempty"`
}

func (m *CreateCoinReq) Reset()         { *m = CreateCoinReq{} }
func (m *CreateCoinReq) String() string { return proto.CompactTextString(m) }
func (*CreateCoinReq) ProtoMessage()    {}

type CreateCheckReq struct {
	Coin  string  `protobuf:"bytes,1,opt" json:"Coin,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt" json:"Value,omitempty"`
	Pswrd string  `protobuf:"bytes,3,opt" json:"Pswrd,omitempty"`
	Nonce uint64  `protobuf:"varint,4,opt" json:"Nonce,omitempty"`
}

func (m *CreateCheckReq) Reset()         { *m = CreateCheckReq{} }
func (m *CreateCheckReq) String() string { return proto.CompactTextString(m) }
func (*CreateCheckReq) ProtoMessage()    {}

type RedeemCheckReq struct {
	Check string `protobuf:"bytes,1,opt" json:"Check,omitempty"`
	Pswrd string `protobuf:"bytes,2,opt" json:"Pswrd,omitempty"`
}

func (m *RedeemCheckReq) Reset()         { *m = RedeemCheckReq{} }
func (m *RedeemCheckReq) String() string { return proto.CompactTextString(m) }
func (*RedeemCheckReq) ProtoMessage()    {}

type NewNodeInfoReq struct {
	Title       string `protobuf:"bytes,1,opt" json:"Title,omitempty"`
	WWW         string `protobuf:"bytes,2,opt" json:"WWW,omitempty"`
	Description string `protobuf:"bytes,3,opt" json:"Description,omitempty"`
	Icon        string `protobuf:"bytes,4,opt" json:"Icon,omitempty"`
}

func (m *NewNodeInfoReq) Reset()         { *m = NewNodeInfoReq{} }
func (m *NewNodeInfoReq) String() string { return proto.CompactTextString(m) }
func (*NewNodeInfoReq) ProtoMessage()    {}

type NewCoinInfoReq struct {
	WWW         string `protobuf:"bytes,1,opt" json:"WWW,omitempty"`
	Description string `protobuf:"bytes,2,opt" json:"Description,omitempty"`
	Icon        string `protobuf:"bytes,3,opt" json:"Icon,omitempty"`
}

func (m *NewCoinInfoReq) Reset()         { *m = NewCoinInfoReq{} }
func (m *NewCoinInfoReq) String() string { return proto.CompactTextString(m) }
func (*NewCoinInfoReq) ProtoMessage()    {}

func init() {
}

// Client API for PlatformAPI service

type PlatformAPIClient interface {
	SessionCreate(ctx context.Context, in *SeedPhrase, opts ...grpc.CallOption) (*SessionID, error)
	SessionCheck(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*WalletReq, error)
	SessionDelete(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*NilReq, error)
	NewMnemonic(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*SeedPhrase, error)
	AutoTaskOut(ctx context.Context, in *AtasksOutReq, opts ...grpc.CallOption) (*ReturnAPITask, error)
	AutoTaskIn(ctx context.Context, in *ResQ, opts ...grpc.CallOption) (*NodeTodoQ, error)
	BlockOne(ctx context.Context, in *BlockInfoReq, opts ...grpc.CallOption) (*RetJSONBlock, error)
	TransactionOne(ctx context.Context, in *TrxInfoReq, opts ...grpc.CallOption) (*RetJSONTrx, error)
	NodeOne(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*RetJSONNode, error)
	BlocksList(ctx context.Context, in *BlocksListReq, opts ...grpc.CallOption) (*BlocksListResp, error)
	TransactionsList(ctx context.Context, in *TrxsListReq, opts ...grpc.CallOption) (*TrxsListResp, error)
	NodesList(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*NodesListResp, error)
	CoinsList(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*CoinsListResp, error)
	CoinOne(ctx context.Context, in *CoinReq, opts ...grpc.CallOption) (*CoinResp, error)
	TasksList(ctx context.Context, in *WalletListReq, opts ...grpc.CallOption) (*TasksListResp, error)
	WalletCoins(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletResp, error)
	SyncStatus(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*SyncResp, error)
	CoinBase(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*CoinBaseResp, error)
	WalletRewards(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletRewardsResp, error)
	WalletDelegate(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletDelegateResp, error)
	WalletTrxs(ctx context.Context, in *WalletListReq, opts ...grpc.CallOption) (*TrxsListResp, error)
	WalletActSendCoin(ctx context.Context, in *SendCoinReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActDelegCoin(ctx context.Context, in *DelegCoinReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActDeclrNode(ctx context.Context, in *DeclareNodeReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActOnOffNode(ctx context.Context, in *StartStopNodeReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActCreateCoin(ctx context.Context, in *CreateCoinReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActCreateChec(ctx context.Context, in *CreateCheckReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActRedeemCheck(ctx context.Context, in *RedeemCheckReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActNodeInfo(ctx context.Context, in *NewNodeInfoReq, opts ...grpc.CallOption) (*ActionResp, error)
	WalletActCoinInfo(ctx context.Context, in *NewCoinInfoReq, opts ...grpc.CallOption) (*ActionResp, error)
}

type platformAPIClient struct {
	cc *grpc.ClientConn
}

func NewPlatformAPIClient(cc *grpc.ClientConn) PlatformAPIClient {
	return &platformAPIClient{cc}
}

func (c *platformAPIClient) SessionCreate(ctx context.Context, in *SeedPhrase, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := grpc.Invoke(ctx, "/.PlatformAPI/SessionCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) SessionCheck(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*WalletReq, error) {
	out := new(WalletReq)
	err := grpc.Invoke(ctx, "/.PlatformAPI/SessionCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) SessionDelete(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*NilReq, error) {
	out := new(NilReq)
	err := grpc.Invoke(ctx, "/.PlatformAPI/SessionDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) NewMnemonic(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*SeedPhrase, error) {
	out := new(SeedPhrase)
	err := grpc.Invoke(ctx, "/.PlatformAPI/NewMnemonic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) AutoTaskOut(ctx context.Context, in *AtasksOutReq, opts ...grpc.CallOption) (*ReturnAPITask, error) {
	out := new(ReturnAPITask)
	err := grpc.Invoke(ctx, "/.PlatformAPI/AutoTaskOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) AutoTaskIn(ctx context.Context, in *ResQ, opts ...grpc.CallOption) (*NodeTodoQ, error) {
	out := new(NodeTodoQ)
	err := grpc.Invoke(ctx, "/.PlatformAPI/AutoTaskIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) BlockOne(ctx context.Context, in *BlockInfoReq, opts ...grpc.CallOption) (*RetJSONBlock, error) {
	out := new(RetJSONBlock)
	err := grpc.Invoke(ctx, "/.PlatformAPI/BlockOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) TransactionOne(ctx context.Context, in *TrxInfoReq, opts ...grpc.CallOption) (*RetJSONTrx, error) {
	out := new(RetJSONTrx)
	err := grpc.Invoke(ctx, "/.PlatformAPI/TransactionOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) NodeOne(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*RetJSONNode, error) {
	out := new(RetJSONNode)
	err := grpc.Invoke(ctx, "/.PlatformAPI/NodeOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) BlocksList(ctx context.Context, in *BlocksListReq, opts ...grpc.CallOption) (*BlocksListResp, error) {
	out := new(BlocksListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/BlocksList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) TransactionsList(ctx context.Context, in *TrxsListReq, opts ...grpc.CallOption) (*TrxsListResp, error) {
	out := new(TrxsListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/TransactionsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) NodesList(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*NodesListResp, error) {
	out := new(NodesListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/NodesList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) CoinsList(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*CoinsListResp, error) {
	out := new(CoinsListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/CoinsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) CoinOne(ctx context.Context, in *CoinReq, opts ...grpc.CallOption) (*CoinResp, error) {
	out := new(CoinResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/CoinOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) TasksList(ctx context.Context, in *WalletListReq, opts ...grpc.CallOption) (*TasksListResp, error) {
	out := new(TasksListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/TasksList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletCoins(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletResp, error) {
	out := new(WalletResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletCoins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) SyncStatus(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/SyncStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) CoinBase(ctx context.Context, in *NilReq, opts ...grpc.CallOption) (*CoinBaseResp, error) {
	out := new(CoinBaseResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/CoinBase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletRewards(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletRewardsResp, error) {
	out := new(WalletRewardsResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletRewards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletDelegate(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletDelegateResp, error) {
	out := new(WalletDelegateResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletDelegate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletTrxs(ctx context.Context, in *WalletListReq, opts ...grpc.CallOption) (*TrxsListResp, error) {
	out := new(TrxsListResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletTrxs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActSendCoin(ctx context.Context, in *SendCoinReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActSendCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActDelegCoin(ctx context.Context, in *DelegCoinReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActDelegCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActDeclrNode(ctx context.Context, in *DeclareNodeReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActDeclrNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActOnOffNode(ctx context.Context, in *StartStopNodeReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActOnOffNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActCreateCoin(ctx context.Context, in *CreateCoinReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActCreateCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActCreateChec(ctx context.Context, in *CreateCheckReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActCreateChec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActRedeemCheck(ctx context.Context, in *RedeemCheckReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActRedeemCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActNodeInfo(ctx context.Context, in *NewNodeInfoReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) WalletActCoinInfo(ctx context.Context, in *NewCoinInfoReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := grpc.Invoke(ctx, "/.PlatformAPI/WalletActCoinInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlatformAPI service

type PlatformAPIServer interface {
	SessionCreate(context.Context, *SeedPhrase) (*SessionID, error)
	SessionCheck(context.Context, *SessionID) (*WalletReq, error)
	SessionDelete(context.Context, *SessionID) (*NilReq, error)
	NewMnemonic(context.Context, *NilReq) (*SeedPhrase, error)
	AutoTaskOut(context.Context, *AtasksOutReq) (*ReturnAPITask, error)
	AutoTaskIn(context.Context, *ResQ) (*NodeTodoQ, error)
	BlockOne(context.Context, *BlockInfoReq) (*RetJSONBlock, error)
	TransactionOne(context.Context, *TrxInfoReq) (*RetJSONTrx, error)
	NodeOne(context.Context, *NodeInfoReq) (*RetJSONNode, error)
	BlocksList(context.Context, *BlocksListReq) (*BlocksListResp, error)
	TransactionsList(context.Context, *TrxsListReq) (*TrxsListResp, error)
	NodesList(context.Context, *NilReq) (*NodesListResp, error)
	CoinsList(context.Context, *NilReq) (*CoinsListResp, error)
	CoinOne(context.Context, *CoinReq) (*CoinResp, error)
	TasksList(context.Context, *WalletListReq) (*TasksListResp, error)
	WalletCoins(context.Context, *WalletReq) (*WalletResp, error)
	SyncStatus(context.Context, *NilReq) (*SyncResp, error)
	CoinBase(context.Context, *NilReq) (*CoinBaseResp, error)
	WalletRewards(context.Context, *WalletReq) (*WalletRewardsResp, error)
	WalletDelegate(context.Context, *WalletReq) (*WalletDelegateResp, error)
	WalletTrxs(context.Context, *WalletListReq) (*TrxsListResp, error)
	WalletActSendCoin(context.Context, *SendCoinReq) (*ActionResp, error)
	WalletActDelegCoin(context.Context, *DelegCoinReq) (*ActionResp, error)
	WalletActDeclrNode(context.Context, *DeclareNodeReq) (*ActionResp, error)
	WalletActOnOffNode(context.Context, *StartStopNodeReq) (*ActionResp, error)
	WalletActCreateCoin(context.Context, *CreateCoinReq) (*ActionResp, error)
	WalletActCreateChec(context.Context, *CreateCheckReq) (*ActionResp, error)
	WalletActRedeemCheck(context.Context, *RedeemCheckReq) (*ActionResp, error)
	WalletActNodeInfo(context.Context, *NewNodeInfoReq) (*ActionResp, error)
	WalletActCoinInfo(context.Context, *NewCoinInfoReq) (*ActionResp, error)
}

func RegisterPlatformAPIServer(s *grpc.Server, srv PlatformAPIServer) {
	s.RegisterService(&_PlatformAPI_serviceDesc, srv)
}

func _PlatformAPI_SessionCreate_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SeedPhrase)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).SessionCreate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_SessionCheck_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SessionID)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).SessionCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_SessionDelete_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SessionID)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).SessionDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_NewMnemonic_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NilReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).NewMnemonic(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_AutoTaskOut_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(AtasksOutReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).AutoTaskOut(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_AutoTaskIn_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(ResQ)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).AutoTaskIn(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_BlockOne_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(BlockInfoReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).BlockOne(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_TransactionOne_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(TrxInfoReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).TransactionOne(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_NodeOne_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NodeInfoReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).NodeOne(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_BlocksList_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(BlocksListReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).BlocksList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_TransactionsList_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(TrxsListReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).TransactionsList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_NodesList_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NilReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).NodesList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_CoinsList_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NilReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).CoinsList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_CoinOne_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(CoinReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).CoinOne(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_TasksList_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(WalletListReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).TasksList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletCoins_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(WalletReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletCoins(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_SyncStatus_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NilReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).SyncStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_CoinBase_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NilReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).CoinBase(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletRewards_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(WalletReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletRewards(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletDelegate_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(WalletReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletDelegate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletTrxs_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(WalletListReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletTrxs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActSendCoin_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SendCoinReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActSendCoin(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActDelegCoin_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(DelegCoinReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActDelegCoin(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActDeclrNode_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(DeclareNodeReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActDeclrNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActOnOffNode_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(StartStopNodeReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActOnOffNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActCreateCoin_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(CreateCoinReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActCreateCoin(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActCreateChec_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(CreateCheckReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActCreateChec(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActRedeemCheck_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(RedeemCheckReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActRedeemCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActNodeInfo_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NewNodeInfoReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActNodeInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlatformAPI_WalletActCoinInfo_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(NewCoinInfoReq)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PlatformAPIServer).WalletActCoinInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PlatformAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".PlatformAPI",
	HandlerType: (*PlatformAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionCreate",
			Handler:    _PlatformAPI_SessionCreate_Handler,
		},
		{
			MethodName: "SessionCheck",
			Handler:    _PlatformAPI_SessionCheck_Handler,
		},
		{
			MethodName: "SessionDelete",
			Handler:    _PlatformAPI_SessionDelete_Handler,
		},
		{
			MethodName: "NewMnemonic",
			Handler:    _PlatformAPI_NewMnemonic_Handler,
		},
		{
			MethodName: "AutoTaskOut",
			Handler:    _PlatformAPI_AutoTaskOut_Handler,
		},
		{
			MethodName: "AutoTaskIn",
			Handler:    _PlatformAPI_AutoTaskIn_Handler,
		},
		{
			MethodName: "BlockOne",
			Handler:    _PlatformAPI_BlockOne_Handler,
		},
		{
			MethodName: "TransactionOne",
			Handler:    _PlatformAPI_TransactionOne_Handler,
		},
		{
			MethodName: "NodeOne",
			Handler:    _PlatformAPI_NodeOne_Handler,
		},
		{
			MethodName: "BlocksList",
			Handler:    _PlatformAPI_BlocksList_Handler,
		},
		{
			MethodName: "TransactionsList",
			Handler:    _PlatformAPI_TransactionsList_Handler,
		},
		{
			MethodName: "NodesList",
			Handler:    _PlatformAPI_NodesList_Handler,
		},
		{
			MethodName: "CoinsList",
			Handler:    _PlatformAPI_CoinsList_Handler,
		},
		{
			MethodName: "CoinOne",
			Handler:    _PlatformAPI_CoinOne_Handler,
		},
		{
			MethodName: "TasksList",
			Handler:    _PlatformAPI_TasksList_Handler,
		},
		{
			MethodName: "WalletCoins",
			Handler:    _PlatformAPI_WalletCoins_Handler,
		},
		{
			MethodName: "SyncStatus",
			Handler:    _PlatformAPI_SyncStatus_Handler,
		},
		{
			MethodName: "CoinBase",
			Handler:    _PlatformAPI_CoinBase_Handler,
		},
		{
			MethodName: "WalletRewards",
			Handler:    _PlatformAPI_WalletRewards_Handler,
		},
		{
			MethodName: "WalletDelegate",
			Handler:    _PlatformAPI_WalletDelegate_Handler,
		},
		{
			MethodName: "WalletTrxs",
			Handler:    _PlatformAPI_WalletTrxs_Handler,
		},
		{
			MethodName: "WalletActSendCoin",
			Handler:    _PlatformAPI_WalletActSendCoin_Handler,
		},
		{
			MethodName: "WalletActDelegCoin",
			Handler:    _PlatformAPI_WalletActDelegCoin_Handler,
		},
		{
			MethodName: "WalletActDeclrNode",
			Handler:    _PlatformAPI_WalletActDeclrNode_Handler,
		},
		{
			MethodName: "WalletActOnOffNode",
			Handler:    _PlatformAPI_WalletActOnOffNode_Handler,
		},
		{
			MethodName: "WalletActCreateCoin",
			Handler:    _PlatformAPI_WalletActCreateCoin_Handler,
		},
		{
			MethodName: "WalletActCreateChec",
			Handler:    _PlatformAPI_WalletActCreateChec_Handler,
		},
		{
			MethodName: "WalletActRedeemCheck",
			Handler:    _PlatformAPI_WalletActRedeemCheck_Handler,
		},
		{
			MethodName: "WalletActNodeInfo",
			Handler:    _PlatformAPI_WalletActNodeInfo_Handler,
		},
		{
			MethodName: "WalletActCoinInfo",
			Handler:    _PlatformAPI_WalletActCoinInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
