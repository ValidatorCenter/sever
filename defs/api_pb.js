/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActionResp', null, global);
goog.exportSymbol('proto.AtasksOutReq', null, global);
goog.exportSymbol('proto.Block1', null, global);
goog.exportSymbol('proto.Block1Events', null, global);
goog.exportSymbol('proto.Block1Transaction', null, global);
goog.exportSymbol('proto.Block1Validator', null, global);
goog.exportSymbol('proto.BlockInfoReq', null, global);
goog.exportSymbol('proto.BlocksListReq', null, global);
goog.exportSymbol('proto.BlocksListResp', null, global);
goog.exportSymbol('proto.BlocksStory', null, global);
goog.exportSymbol('proto.CoinActionpData', null, global);
goog.exportSymbol('proto.CoinBaseResp', null, global);
goog.exportSymbol('proto.CoinMarketCapData', null, global);
goog.exportSymbol('proto.CoinReq', null, global);
goog.exportSymbol('proto.CoinResp', null, global);
goog.exportSymbol('proto.CoinView', null, global);
goog.exportSymbol('proto.CoinsListResp', null, global);
goog.exportSymbol('proto.CreateCheckReq', null, global);
goog.exportSymbol('proto.CreateCoinReq', null, global);
goog.exportSymbol('proto.DeclareNodeReq', null, global);
goog.exportSymbol('proto.DelegCoinReq', null, global);
goog.exportSymbol('proto.Delegate', null, global);
goog.exportSymbol('proto.NewCoinInfoReq', null, global);
goog.exportSymbol('proto.NewNodeInfoReq', null, global);
goog.exportSymbol('proto.NilReq', null, global);
goog.exportSymbol('proto.NodeExt2', null, global);
goog.exportSymbol('proto.NodeInfoReq', null, global);
goog.exportSymbol('proto.NodeTodoQ', null, global);
goog.exportSymbol('proto.NodesListResp', null, global);
goog.exportSymbol('proto.OneCoinTrans', null, global);
goog.exportSymbol('proto.RedeemCheckReq', null, global);
goog.exportSymbol('proto.ResQ', null, global);
goog.exportSymbol('proto.ResReward', null, global);
goog.exportSymbol('proto.RetJSONBlock', null, global);
goog.exportSymbol('proto.RetJSONNode', null, global);
goog.exportSymbol('proto.RetJSONTrx', null, global);
goog.exportSymbol('proto.ReturnAPITask', null, global);
goog.exportSymbol('proto.SeedPhrase', null, global);
goog.exportSymbol('proto.SendCoinReq', null, global);
goog.exportSymbol('proto.SessionID', null, global);
goog.exportSymbol('proto.StakesInfo', null, global);
goog.exportSymbol('proto.StartStopNodeReq', null, global);
goog.exportSymbol('proto.SyncResp', null, global);
goog.exportSymbol('proto.TaskOne', null, global);
goog.exportSymbol('proto.TasksListResp', null, global);
goog.exportSymbol('proto.Timestamp', null, global);
goog.exportSymbol('proto.TodoOneQ', null, global);
goog.exportSymbol('proto.Trans1', null, global);
goog.exportSymbol('proto.TrxInfoReq', null, global);
goog.exportSymbol('proto.TrxsListReq', null, global);
goog.exportSymbol('proto.TrxsListResp', null, global);
goog.exportSymbol('proto.WalletCoin1', null, global);
goog.exportSymbol('proto.WalletDelegateResp', null, global);
goog.exportSymbol('proto.WalletListReq', null, global);
goog.exportSymbol('proto.WalletReq', null, global);
goog.exportSymbol('proto.WalletResp', null, global);
goog.exportSymbol('proto.WalletRewardsResp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Timestamp.displayName = 'proto.Timestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Timestamp;
  return proto.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Timestamp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Timestamp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Timestamp.prototype.setSeconds = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Timestamp.prototype.setNanos = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NilReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NilReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NilReq.displayName = 'proto.NilReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NilReq.prototype.toObject = function(opt_includeInstance) {
  return proto.NilReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NilReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NilReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    nil: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NilReq}
 */
proto.NilReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NilReq;
  return proto.NilReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NilReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NilReq}
 */
proto.NilReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NilReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NilReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NilReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NilReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNil();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Nil = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NilReq.prototype.getNil = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.NilReq.prototype.setNil = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SessionID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SessionID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SessionID.displayName = 'proto.SessionID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SessionID.prototype.toObject = function(opt_includeInstance) {
  return proto.SessionID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SessionID} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SessionID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SessionID}
 */
proto.SessionID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SessionID;
  return proto.SessionID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SessionID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SessionID}
 */
proto.SessionID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SessionID} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SessionID.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SessionID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SessionID.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.SessionID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SessionID.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeedPhrase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeedPhrase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeedPhrase.displayName = 'proto.SeedPhrase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeedPhrase.prototype.toObject = function(opt_includeInstance) {
  return proto.SeedPhrase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeedPhrase} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeedPhrase.toObject = function(includeInstance, msg) {
  var f, obj = {
    mnemonic: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeedPhrase}
 */
proto.SeedPhrase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeedPhrase;
  return proto.SeedPhrase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeedPhrase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeedPhrase}
 */
proto.SeedPhrase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMnemonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SeedPhrase} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeedPhrase.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeedPhrase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeedPhrase.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMnemonic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Mnemonic = 1;
 * @return {string}
 */
proto.SeedPhrase.prototype.getMnemonic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SeedPhrase.prototype.setMnemonic = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AtasksOutReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AtasksOutReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AtasksOutReq.displayName = 'proto.AtasksOutReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AtasksOutReq.prototype.toObject = function(opt_includeInstance) {
  return proto.AtasksOutReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AtasksOutReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AtasksOutReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenauth: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubkey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AtasksOutReq}
 */
proto.AtasksOutReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AtasksOutReq;
  return proto.AtasksOutReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AtasksOutReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AtasksOutReq}
 */
proto.AtasksOutReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenauth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.AtasksOutReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AtasksOutReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AtasksOutReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.AtasksOutReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTokenauth();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string TokenAuth = 1;
 * @return {string}
 */
proto.AtasksOutReq.prototype.getTokenauth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AtasksOutReq.prototype.setTokenauth = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string PubKey = 2;
 * @return {string}
 */
proto.AtasksOutReq.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AtasksOutReq.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReturnAPITask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReturnAPITask.repeatedFields_, null);
};
goog.inherits(proto.ReturnAPITask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReturnAPITask.displayName = 'proto.ReturnAPITask';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReturnAPITask.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReturnAPITask.prototype.toObject = function(opt_includeInstance) {
  return proto.ReturnAPITask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReturnAPITask} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ReturnAPITask.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletcash: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.TaskOne.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReturnAPITask}
 */
proto.ReturnAPITask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReturnAPITask;
  return proto.ReturnAPITask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReturnAPITask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReturnAPITask}
 */
proto.ReturnAPITask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWalletcash(value);
      break;
    case 2:
      var value = new proto.TaskOne;
      reader.readMessage(value,proto.TaskOne.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ReturnAPITask} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ReturnAPITask.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReturnAPITask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ReturnAPITask.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWalletcash();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TaskOne.serializeBinaryToWriter
    );
  }
};


/**
 * optional float WalletCash = 1;
 * @return {number}
 */
proto.ReturnAPITask.prototype.getWalletcash = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.ReturnAPITask.prototype.setWalletcash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated TaskOne List = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TaskOne>}
 */
proto.ReturnAPITask.prototype.getListList = function() {
  return /** @type{!Array.<!proto.TaskOne>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskOne, 2));
};


/** @param {!Array.<!proto.TaskOne>} value */
proto.ReturnAPITask.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TaskOne=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskOne}
 */
proto.ReturnAPITask.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TaskOne, opt_index);
};


proto.ReturnAPITask.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TaskOne = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TaskOne, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TaskOne.displayName = 'proto.TaskOne';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TaskOne.prototype.toObject = function(opt_includeInstance) {
  return proto.TaskOne.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TaskOne} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TaskOne.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: jspb.Message.getFieldWithDefault(msg, 1, false),
    created: (f = msg.getCreated()) && proto.Timestamp.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    address: jspb.Message.getFieldWithDefault(msg, 6, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TaskOne}
 */
proto.TaskOne.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TaskOne;
  return proto.TaskOne.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TaskOne} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TaskOne}
 */
proto.TaskOne.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    case 2:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TaskOne} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TaskOne.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TaskOne.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TaskOne.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDone();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getCreated();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional bool Done = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TaskOne.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.TaskOne.prototype.setDone = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Timestamp Created = 2;
 * @return {?proto.Timestamp}
 */
proto.TaskOne.prototype.getCreated = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 2));
};


/** @param {?proto.Timestamp|undefined} value */
proto.TaskOne.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TaskOne.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TaskOne.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Type = 3;
 * @return {string}
 */
proto.TaskOne.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TaskOne.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 Height = 4;
 * @return {number}
 */
proto.TaskOne.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TaskOne.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string PubKey = 5;
 * @return {string}
 */
proto.TaskOne.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.TaskOne.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Address = 6;
 * @return {string}
 */
proto.TaskOne.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.TaskOne.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float Amount = 7;
 * @return {number}
 */
proto.TaskOne.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.TaskOne.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResQ.displayName = 'proto.ResQ';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResQ.prototype.toObject = function(opt_includeInstance) {
  return proto.ResQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResQ} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ResQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResQ}
 */
proto.ResQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResQ;
  return proto.ResQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResQ}
 */
proto.ResQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ResQ} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ResQ.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ResQ.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 Status = 1;
 * @return {number}
 */
proto.ResQ.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ResQ.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.ResQ.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ResQ.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NodeTodoQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NodeTodoQ.repeatedFields_, null);
};
goog.inherits(proto.NodeTodoQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NodeTodoQ.displayName = 'proto.NodeTodoQ';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NodeTodoQ.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NodeTodoQ.prototype.toObject = function(opt_includeInstance) {
  return proto.NodeTodoQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NodeTodoQ} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NodeTodoQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    txhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    qlistList: jspb.Message.toObjectList(msg.getQlistList(),
    proto.TodoOneQ.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NodeTodoQ}
 */
proto.NodeTodoQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NodeTodoQ;
  return proto.NodeTodoQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NodeTodoQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NodeTodoQ}
 */
proto.NodeTodoQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxhash(value);
      break;
    case 2:
      var value = new proto.TodoOneQ;
      reader.readMessage(value,proto.TodoOneQ.deserializeBinaryFromReader);
      msg.addQlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NodeTodoQ} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeTodoQ.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NodeTodoQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeTodoQ.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTxhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getQlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TodoOneQ.serializeBinaryToWriter
    );
  }
};


/**
 * optional string TxHash = 1;
 * @return {string}
 */
proto.NodeTodoQ.prototype.getTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NodeTodoQ.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated TodoOneQ QList = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TodoOneQ>}
 */
proto.NodeTodoQ.prototype.getQlistList = function() {
  return /** @type{!Array.<!proto.TodoOneQ>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TodoOneQ, 2));
};


/** @param {!Array.<!proto.TodoOneQ>} value */
proto.NodeTodoQ.prototype.setQlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TodoOneQ=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TodoOneQ}
 */
proto.NodeTodoQ.prototype.addQlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TodoOneQ, opt_index);
};


proto.NodeTodoQ.prototype.clearQlistList = function() {
  this.setQlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TodoOneQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TodoOneQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TodoOneQ.displayName = 'proto.TodoOneQ';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TodoOneQ.prototype.toObject = function(opt_includeInstance) {
  return proto.TodoOneQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TodoOneQ} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TodoOneQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pubkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    created: (f = msg.getCreated()) && proto.Timestamp.toObject(includeInstance, f),
    amount: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TodoOneQ}
 */
proto.TodoOneQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TodoOneQ;
  return proto.TodoOneQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TodoOneQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TodoOneQ}
 */
proto.TodoOneQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TodoOneQ} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TodoOneQ.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TodoOneQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TodoOneQ.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional string Type = 1;
 * @return {string}
 */
proto.TodoOneQ.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TodoOneQ.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 Height = 2;
 * @return {number}
 */
proto.TodoOneQ.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TodoOneQ.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string PubKey = 3;
 * @return {string}
 */
proto.TodoOneQ.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TodoOneQ.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Address = 4;
 * @return {string}
 */
proto.TodoOneQ.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TodoOneQ.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Timestamp Created = 5;
 * @return {?proto.Timestamp}
 */
proto.TodoOneQ.prototype.getCreated = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 5));
};


/** @param {?proto.Timestamp|undefined} value */
proto.TodoOneQ.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TodoOneQ.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TodoOneQ.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float Amount = 6;
 * @return {number}
 */
proto.TodoOneQ.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.TodoOneQ.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockInfoReq.displayName = 'proto.BlockInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BlockInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockInfoReq}
 */
proto.BlockInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockInfoReq;
  return proto.BlockInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockInfoReq}
 */
proto.BlockInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BlockInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlockInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlockInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Number = 1;
 * @return {number}
 */
proto.BlockInfoReq.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlockInfoReq.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RetJSONBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RetJSONBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RetJSONBlock.displayName = 'proto.RetJSONBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RetJSONBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.RetJSONBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RetJSONBlock} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RetJSONBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, false),
    block: (f = msg.getBlock()) && proto.Block1.toObject(includeInstance, f),
    errmsg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RetJSONBlock}
 */
proto.RetJSONBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RetJSONBlock;
  return proto.RetJSONBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RetJSONBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RetJSONBlock}
 */
proto.RetJSONBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.Block1;
      reader.readMessage(value,proto.Block1.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RetJSONBlock} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONBlock.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RetJSONBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONBlock.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Block1.serializeBinaryToWriter
    );
  }
  f = this.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool Status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RetJSONBlock.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RetJSONBlock.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Block1 Block = 2;
 * @return {?proto.Block1}
 */
proto.RetJSONBlock.prototype.getBlock = function() {
  return /** @type{?proto.Block1} */ (
    jspb.Message.getWrapperField(this, proto.Block1, 2));
};


/** @param {?proto.Block1|undefined} value */
proto.RetJSONBlock.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RetJSONBlock.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RetJSONBlock.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ErrMsg = 3;
 * @return {string}
 */
proto.RetJSONBlock.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RetJSONBlock.prototype.setErrmsg = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block1.repeatedFields_, null);
};
goog.inherits(proto.Block1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block1.displayName = 'proto.Block1';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block1.repeatedFields_ = [8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block1.prototype.toObject = function(opt_includeInstance) {
  return proto.Block1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block1} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Block1.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hashmin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: (f = msg.getTime()) && proto.Timestamp.toObject(includeInstance, f),
    age: jspb.Message.getFieldWithDefault(msg, 5, ""),
    numtxs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totaltxs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.Block1Transaction.toObject, includeInstance),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.Block1Events.toObject, includeInstance),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.Block1Validator.toObject, includeInstance),
    proposer: jspb.Message.getFieldWithDefault(msg, 11, ""),
    proposername: jspb.Message.getFieldWithDefault(msg, 12, ""),
    proposerlogo: jspb.Message.getFieldWithDefault(msg, 13, ""),
    blockreward: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    size: jspb.Message.getFieldWithDefault(msg, 15, 0),
    transactionsamnt: jspb.Message.getFieldWithDefault(msg, 16, 0),
    eventsamnt: jspb.Message.getFieldWithDefault(msg, 17, 0),
    precommitsamnt: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block1}
 */
proto.Block1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block1;
  return proto.Block1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block1}
 */
proto.Block1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAge(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumtxs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotaltxs(value);
      break;
    case 8:
      var value = new proto.Block1Transaction;
      reader.readMessage(value,proto.Block1Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 9:
      var value = new proto.Block1Events;
      reader.readMessage(value,proto.Block1Events.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 10:
      var value = new proto.Block1Validator;
      reader.readMessage(value,proto.Block1Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposer(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposername(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposerlogo(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBlockreward(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTransactionsamnt(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventsamnt(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrecommitsamnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Block1} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHashmin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getAge();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getNumtxs();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getTotaltxs();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.Block1Transaction.serializeBinaryToWriter
    );
  }
  f = this.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.Block1Events.serializeBinaryToWriter
    );
  }
  f = this.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.Block1Validator.serializeBinaryToWriter
    );
  }
  f = this.getProposer();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getProposername();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getProposerlogo();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getBlockreward();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = this.getTransactionsamnt();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = this.getEventsamnt();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = this.getPrecommitsamnt();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.Block1.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Block1.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string HashMin = 2;
 * @return {string}
 */
proto.Block1.prototype.getHashmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Block1.prototype.setHashmin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 Height = 3;
 * @return {number}
 */
proto.Block1.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Block1.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Timestamp Time = 4;
 * @return {?proto.Timestamp}
 */
proto.Block1.prototype.getTime = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 4));
};


/** @param {?proto.Timestamp|undefined} value */
proto.Block1.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Block1.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Block1.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string Age = 5;
 * @return {string}
 */
proto.Block1.prototype.getAge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Block1.prototype.setAge = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 NumTxs = 6;
 * @return {number}
 */
proto.Block1.prototype.getNumtxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Block1.prototype.setNumtxs = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 TotalTxs = 7;
 * @return {number}
 */
proto.Block1.prototype.getTotaltxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Block1.prototype.setTotaltxs = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated Block1Transaction Transactions = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Block1Transaction>}
 */
proto.Block1.prototype.getTransactionsList = function() {
  return /** @type{!Array.<!proto.Block1Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block1Transaction, 8));
};


/** @param {!Array.<!proto.Block1Transaction>} value */
proto.Block1.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Block1Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block1Transaction}
 */
proto.Block1.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Block1Transaction, opt_index);
};


proto.Block1.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * repeated Block1Events Events = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Block1Events>}
 */
proto.Block1.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.Block1Events>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block1Events, 9));
};


/** @param {!Array.<!proto.Block1Events>} value */
proto.Block1.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.Block1Events=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block1Events}
 */
proto.Block1.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.Block1Events, opt_index);
};


proto.Block1.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * repeated Block1Validator Validators = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Block1Validator>}
 */
proto.Block1.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.Block1Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block1Validator, 10));
};


/** @param {!Array.<!proto.Block1Validator>} value */
proto.Block1.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.Block1Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block1Validator}
 */
proto.Block1.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.Block1Validator, opt_index);
};


proto.Block1.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};


/**
 * optional string Proposer = 11;
 * @return {string}
 */
proto.Block1.prototype.getProposer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Block1.prototype.setProposer = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string ProposerName = 12;
 * @return {string}
 */
proto.Block1.prototype.getProposername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Block1.prototype.setProposername = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string ProposerLogo = 13;
 * @return {string}
 */
proto.Block1.prototype.getProposerlogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Block1.prototype.setProposerlogo = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional float BlockReward = 14;
 * @return {number}
 */
proto.Block1.prototype.getBlockreward = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.Block1.prototype.setBlockreward = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 Size = 15;
 * @return {number}
 */
proto.Block1.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Block1.prototype.setSize = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 TransactionsAmnt = 16;
 * @return {number}
 */
proto.Block1.prototype.getTransactionsamnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.Block1.prototype.setTransactionsamnt = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 EventsAmnt = 17;
 * @return {number}
 */
proto.Block1.prototype.getEventsamnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Block1.prototype.setEventsamnt = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional int32 PrecommitsAmnt = 18;
 * @return {number}
 */
proto.Block1.prototype.getPrecommitsamnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Block1.prototype.setPrecommitsamnt = function(value) {
  jspb.Message.setField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block1Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Block1Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block1Transaction.displayName = 'proto.Block1Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block1Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.Block1Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block1Transaction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Block1Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hashmin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    from: jspb.Message.getFieldWithDefault(msg, 3, ""),
    frommin: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gasprice: jspb.Message.getFieldWithDefault(msg, 6, 0),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    typetxt: jspb.Message.getFieldWithDefault(msg, 8, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    payload: jspb.Message.getFieldWithDefault(msg, 10, ""),
    gas: jspb.Message.getFieldWithDefault(msg, 11, 0),
    gascoin: jspb.Message.getFieldWithDefault(msg, 12, ""),
    gasused: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block1Transaction}
 */
proto.Block1Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block1Transaction;
  return proto.Block1Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block1Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block1Transaction}
 */
proto.Block1Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashmin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrommin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasprice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypetxt(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGas(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGascoin(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasused(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Block1Transaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Transaction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block1Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Transaction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHashmin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFrommin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getGasprice();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getTypetxt();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getPayload();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getGas();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getGascoin();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getGasused();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.Block1Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string HashMin = 2;
 * @return {string}
 */
proto.Block1Transaction.prototype.getHashmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setHashmin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string From = 3;
 * @return {string}
 */
proto.Block1Transaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string FromMin = 4;
 * @return {string}
 */
proto.Block1Transaction.prototype.getFrommin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setFrommin = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 Nonce = 5;
 * @return {number}
 */
proto.Block1Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 GasPrice = 6;
 * @return {number}
 */
proto.Block1Transaction.prototype.getGasprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setGasprice = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 Type = 7;
 * @return {number}
 */
proto.Block1Transaction.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string TypeTxt = 8;
 * @return {string}
 */
proto.Block1Transaction.prototype.getTypetxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setTypetxt = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float Amount = 9;
 * @return {number}
 */
proto.Block1Transaction.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string Payload = 10;
 * @return {string}
 */
proto.Block1Transaction.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 Gas = 11;
 * @return {number}
 */
proto.Block1Transaction.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setGas = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string GasCoin = 12;
 * @return {string}
 */
proto.Block1Transaction.prototype.getGascoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Block1Transaction.prototype.setGascoin = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 GasUsed = 13;
 * @return {number}
 */
proto.Block1Transaction.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Block1Transaction.prototype.setGasused = function(value) {
  jspb.Message.setField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block1Events = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Block1Events, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block1Events.displayName = 'proto.Block1Events';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block1Events.prototype.toObject = function(opt_includeInstance) {
  return proto.Block1Events.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block1Events} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Block1Events.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typetxt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addressmin: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    coin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    validatorpubkey: jspb.Message.getFieldWithDefault(msg, 8, ""),
    validatorpubkeymin: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block1Events}
 */
proto.Block1Events.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block1Events;
  return proto.Block1Events.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block1Events} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block1Events}
 */
proto.Block1Events.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypetxt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressmin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorpubkey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorpubkeymin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Block1Events} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Events.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block1Events.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Events.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTypetxt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAddressmin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = this.getCoin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getValidatorpubkey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getValidatorpubkeymin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string Type = 1;
 * @return {string}
 */
proto.Block1Events.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string TypeTxt = 2;
 * @return {string}
 */
proto.Block1Events.prototype.getTypetxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setTypetxt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Role = 3;
 * @return {string}
 */
proto.Block1Events.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setRole = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Address = 4;
 * @return {string}
 */
proto.Block1Events.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string AddressMin = 5;
 * @return {string}
 */
proto.Block1Events.prototype.getAddressmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setAddressmin = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float Amount = 6;
 * @return {number}
 */
proto.Block1Events.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Block1Events.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Coin = 7;
 * @return {string}
 */
proto.Block1Events.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string ValidatorPubKey = 8;
 * @return {string}
 */
proto.Block1Events.prototype.getValidatorpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setValidatorpubkey = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string ValidatorPubKeyMin = 9;
 * @return {string}
 */
proto.Block1Events.prototype.getValidatorpubkeymin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Block1Events.prototype.setValidatorpubkeymin = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block1Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Block1Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block1Validator.displayName = 'proto.Block1Validator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block1Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.Block1Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block1Validator} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Block1Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signed: jspb.Message.getFieldWithDefault(msg, 2, false),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block1Validator}
 */
proto.Block1Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block1Validator;
  return proto.Block1Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block1Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block1Validator}
 */
proto.Block1Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSigned(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Block1Validator} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Validator.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block1Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Block1Validator.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSigned();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLogo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string PubKey = 1;
 * @return {string}
 */
proto.Block1Validator.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Block1Validator.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool Signed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Block1Validator.prototype.getSigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Block1Validator.prototype.setSigned = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.Block1Validator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Block1Validator.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Logo = 4;
 * @return {string}
 */
proto.Block1Validator.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Block1Validator.prototype.setLogo = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TrxInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxInfoReq.displayName = 'proto.TrxInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TrxInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxInfoReq}
 */
proto.TrxInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxInfoReq;
  return proto.TrxInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxInfoReq}
 */
proto.TrxInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TrxInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Number = 1;
 * @return {string}
 */
proto.TrxInfoReq.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TrxInfoReq.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RetJSONTrx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RetJSONTrx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RetJSONTrx.displayName = 'proto.RetJSONTrx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RetJSONTrx.prototype.toObject = function(opt_includeInstance) {
  return proto.RetJSONTrx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RetJSONTrx} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RetJSONTrx.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, false),
    trx: (f = msg.getTrx()) && proto.Trans1.toObject(includeInstance, f),
    errmsg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RetJSONTrx}
 */
proto.RetJSONTrx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RetJSONTrx;
  return proto.RetJSONTrx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RetJSONTrx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RetJSONTrx}
 */
proto.RetJSONTrx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.Trans1;
      reader.readMessage(value,proto.Trans1.deserializeBinaryFromReader);
      msg.setTrx(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RetJSONTrx} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONTrx.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RetJSONTrx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONTrx.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getTrx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Trans1.serializeBinaryToWriter
    );
  }
  f = this.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool Status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RetJSONTrx.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RetJSONTrx.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Trans1 Trx = 2;
 * @return {?proto.Trans1}
 */
proto.RetJSONTrx.prototype.getTrx = function() {
  return /** @type{?proto.Trans1} */ (
    jspb.Message.getWrapperField(this, proto.Trans1, 2));
};


/** @param {?proto.Trans1|undefined} value */
proto.RetJSONTrx.prototype.setTrx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RetJSONTrx.prototype.clearTrx = function() {
  this.setTrx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RetJSONTrx.prototype.hasTrx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ErrMsg = 3;
 * @return {string}
 */
proto.RetJSONTrx.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RetJSONTrx.prototype.setErrmsg = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Trans1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Trans1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Trans1.displayName = 'proto.Trans1';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Trans1.prototype.toObject = function(opt_includeInstance) {
  return proto.Trans1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Trans1} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Trans1.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hashmin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0),
    from: jspb.Message.getFieldWithDefault(msg, 6, ""),
    frommin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 8, 0),
    gasprice: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gascoin: jspb.Message.getFieldWithDefault(msg, 10, ""),
    gasused: jspb.Message.getFieldWithDefault(msg, 11, 0),
    gasfee: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 13, 0),
    typetxt: jspb.Message.getFieldWithDefault(msg, 14, ""),
    payload: jspb.Message.getFieldWithDefault(msg, 15, ""),
    code: jspb.Message.getFieldWithDefault(msg, 16, 0),
    log: jspb.Message.getFieldWithDefault(msg, 17, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    txcointobuy: jspb.Message.getFieldWithDefault(msg, 19, ""),
    txcointosell: jspb.Message.getFieldWithDefault(msg, 20, ""),
    txfrom: jspb.Message.getFieldWithDefault(msg, 21, ""),
    txreturn: +jspb.Message.getFieldWithDefault(msg, 22, 0.0),
    txsellamount: +jspb.Message.getFieldWithDefault(msg, 23, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Trans1}
 */
proto.Trans1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Trans1;
  return proto.Trans1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Trans1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Trans1}
 */
proto.Trans1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashmin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrommin(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNonce(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasprice(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGascoin(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGasused(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGasfee(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypetxt(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxcointobuy(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxcointosell(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxfrom(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTxreturn(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTxsellamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Trans1} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Trans1.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Trans1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Trans1.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getHashmin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getFrom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getFrommin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getGasprice();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = this.getGascoin();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getGasused();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getGasfee();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = this.getTypetxt();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getPayload();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getCode();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = this.getLog();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = this.getTxcointobuy();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getTxcointosell();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getTxfrom();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getTxreturn();
  if (f !== 0.0) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = this.getTxsellamount();
  if (f !== 0.0) {
    writer.writeFloat(
      23,
      f
    );
  }
};


/**
 * optional string Status = 1;
 * @return {string}
 */
proto.Trans1.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Hash = 2;
 * @return {string}
 */
proto.Trans1.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string HashMin = 3;
 * @return {string}
 */
proto.Trans1.prototype.getHashmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setHashmin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 Height = 4;
 * @return {number}
 */
proto.Trans1.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 Index = 5;
 * @return {number}
 */
proto.Trans1.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string From = 6;
 * @return {string}
 */
proto.Trans1.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string FromMin = 7;
 * @return {string}
 */
proto.Trans1.prototype.getFrommin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setFrommin = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 Nonce = 8;
 * @return {number}
 */
proto.Trans1.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 GasPrice = 9;
 * @return {number}
 */
proto.Trans1.prototype.getGasprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setGasprice = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string GasCoin = 10;
 * @return {string}
 */
proto.Trans1.prototype.getGascoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setGascoin = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 GasUsed = 11;
 * @return {number}
 */
proto.Trans1.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setGasused = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float GasFee = 12;
 * @return {number}
 */
proto.Trans1.prototype.getGasfee = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.Trans1.prototype.setGasfee = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 Type = 13;
 * @return {number}
 */
proto.Trans1.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setType = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string TypeTxt = 14;
 * @return {string}
 */
proto.Trans1.prototype.getTypetxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setTypetxt = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string Payload = 15;
 * @return {string}
 */
proto.Trans1.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 Code = 16;
 * @return {number}
 */
proto.Trans1.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.Trans1.prototype.setCode = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string Log = 17;
 * @return {string}
 */
proto.Trans1.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setLog = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional float Amount = 18;
 * @return {number}
 */
proto.Trans1.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.Trans1.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string TxCoinToBuy = 19;
 * @return {string}
 */
proto.Trans1.prototype.getTxcointobuy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setTxcointobuy = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string TxCoinToSell = 20;
 * @return {string}
 */
proto.Trans1.prototype.getTxcointosell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setTxcointosell = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string TxFrom = 21;
 * @return {string}
 */
proto.Trans1.prototype.getTxfrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.Trans1.prototype.setTxfrom = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional float TxReturn = 22;
 * @return {number}
 */
proto.Trans1.prototype.getTxreturn = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 0.0));
};


/** @param {number} value */
proto.Trans1.prototype.setTxreturn = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional float TxSellAmount = 23;
 * @return {number}
 */
proto.Trans1.prototype.getTxsellamount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 23, 0.0));
};


/** @param {number} value */
proto.Trans1.prototype.setTxsellamount = function(value) {
  jspb.Message.setField(this, 23, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NodeInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NodeInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NodeInfoReq.displayName = 'proto.NodeInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NodeInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.NodeInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NodeInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NodeInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NodeInfoReq}
 */
proto.NodeInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NodeInfoReq;
  return proto.NodeInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NodeInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NodeInfoReq}
 */
proto.NodeInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NodeInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NodeInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Number = 1;
 * @return {string}
 */
proto.NodeInfoReq.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NodeInfoReq.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RetJSONNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RetJSONNode.repeatedFields_, null);
};
goog.inherits(proto.RetJSONNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RetJSONNode.displayName = 'proto.RetJSONNode';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RetJSONNode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RetJSONNode.prototype.toObject = function(opt_includeInstance) {
  return proto.RetJSONNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RetJSONNode} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RetJSONNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, false),
    node: (f = msg.getNode()) && proto.NodeExt2.toObject(includeInstance, f),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.ResReward.toObject, includeInstance),
    errmsg: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RetJSONNode}
 */
proto.RetJSONNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RetJSONNode;
  return proto.RetJSONNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RetJSONNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RetJSONNode}
 */
proto.RetJSONNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.NodeExt2;
      reader.readMessage(value,proto.NodeExt2.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 3:
      var value = new proto.ResReward;
      reader.readMessage(value,proto.ResReward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RetJSONNode} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONNode.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RetJSONNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RetJSONNode.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NodeExt2.serializeBinaryToWriter
    );
  }
  f = this.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ResReward.serializeBinaryToWriter
    );
  }
  f = this.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool Status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RetJSONNode.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RetJSONNode.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional NodeExt2 Node = 2;
 * @return {?proto.NodeExt2}
 */
proto.RetJSONNode.prototype.getNode = function() {
  return /** @type{?proto.NodeExt2} */ (
    jspb.Message.getWrapperField(this, proto.NodeExt2, 2));
};


/** @param {?proto.NodeExt2|undefined} value */
proto.RetJSONNode.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RetJSONNode.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RetJSONNode.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ResReward Rewards = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ResReward>}
 */
proto.RetJSONNode.prototype.getRewardsList = function() {
  return /** @type{!Array.<!proto.ResReward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ResReward, 3));
};


/** @param {!Array.<!proto.ResReward>} value */
proto.RetJSONNode.prototype.setRewardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ResReward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ResReward}
 */
proto.RetJSONNode.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ResReward, opt_index);
};


proto.RetJSONNode.prototype.clearRewardsList = function() {
  this.setRewardsList([]);
};


/**
 * optional string ErrMsg = 4;
 * @return {string}
 */
proto.RetJSONNode.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RetJSONNode.prototype.setErrmsg = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NodeExt2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NodeExt2.repeatedFields_, null);
};
goog.inherits(proto.NodeExt2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NodeExt2.displayName = 'proto.NodeExt2';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NodeExt2.repeatedFields_ = [17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NodeExt2.prototype.toObject = function(opt_includeInstance) {
  return proto.NodeExt2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NodeExt2} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NodeExt2.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validatorurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    validatorlogoimg: jspb.Message.getFieldWithDefault(msg, 3, ""),
    validatordesc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    uptime: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    created: (f = msg.getCreated()) && proto.Timestamp.toObject(includeInstance, f),
    rewardaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    owneraddress: jspb.Message.getFieldWithDefault(msg, 8, ""),
    totalstake: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    pubkey: jspb.Message.getFieldWithDefault(msg, 10, ""),
    pubkeymin: jspb.Message.getFieldWithDefault(msg, 11, ""),
    validatoraddress: jspb.Message.getFieldWithDefault(msg, 12, ""),
    commission: jspb.Message.getFieldWithDefault(msg, 13, 0),
    createdatblock: jspb.Message.getFieldWithDefault(msg, 14, 0),
    statusint: jspb.Message.getFieldWithDefault(msg, 15, 0),
    timeupdate: (f = msg.getTimeupdate()) && proto.Timestamp.toObject(includeInstance, f),
    stakesList: jspb.Message.toObjectList(msg.getStakesList(),
    proto.StakesInfo.toObject, includeInstance),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.BlocksStory.toObject, includeInstance),
    amntblocks: jspb.Message.getFieldWithDefault(msg, 19, 0),
    amntslashed: jspb.Message.getFieldWithDefault(msg, 20, 0),
    amnnoblocks: jspb.Message.getFieldWithDefault(msg, 21, 0),
    amntslots: jspb.Message.getFieldWithDefault(msg, 22, 0),
    commissionnow: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NodeExt2}
 */
proto.NodeExt2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NodeExt2;
  return proto.NodeExt2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NodeExt2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NodeExt2}
 */
proto.NodeExt2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorlogoimg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatordesc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUptime(value);
      break;
    case 6:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewardaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneraddress(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalstake(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkeymin(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatoraddress(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommission(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatedatblock(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusint(value);
      break;
    case 16:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTimeupdate(value);
      break;
    case 17:
      var value = new proto.StakesInfo;
      reader.readMessage(value,proto.StakesInfo.deserializeBinaryFromReader);
      msg.addStakes(value);
      break;
    case 18:
      var value = new proto.BlocksStory;
      reader.readMessage(value,proto.BlocksStory.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmntblocks(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmntslashed(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmnnoblocks(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmntslots(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommissionnow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NodeExt2} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeExt2.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NodeExt2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodeExt2.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidatorname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValidatorurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getValidatorlogoimg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getValidatordesc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUptime();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getCreated();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getRewardaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getOwneraddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getTotalstake();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getPubkeymin();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getValidatoraddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getCommission();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = this.getCreatedatblock();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getStatusint();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = this.getTimeupdate();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getStakesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.StakesInfo.serializeBinaryToWriter
    );
  }
  f = this.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.BlocksStory.serializeBinaryToWriter
    );
  }
  f = this.getAmntblocks();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = this.getAmntslashed();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = this.getAmnnoblocks();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = this.getAmntslots();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = this.getCommissionnow();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
};


/**
 * optional string ValidatorName = 1;
 * @return {string}
 */
proto.NodeExt2.prototype.getValidatorname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setValidatorname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ValidatorURL = 2;
 * @return {string}
 */
proto.NodeExt2.prototype.getValidatorurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setValidatorurl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ValidatorLogoImg = 3;
 * @return {string}
 */
proto.NodeExt2.prototype.getValidatorlogoimg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setValidatorlogoimg = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string ValidatorDesc = 4;
 * @return {string}
 */
proto.NodeExt2.prototype.getValidatordesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setValidatordesc = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float Uptime = 5;
 * @return {number}
 */
proto.NodeExt2.prototype.getUptime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setUptime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Timestamp Created = 6;
 * @return {?proto.Timestamp}
 */
proto.NodeExt2.prototype.getCreated = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 6));
};


/** @param {?proto.Timestamp|undefined} value */
proto.NodeExt2.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.NodeExt2.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NodeExt2.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string RewardAddress = 7;
 * @return {string}
 */
proto.NodeExt2.prototype.getRewardaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setRewardaddress = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string OwnerAddress = 8;
 * @return {string}
 */
proto.NodeExt2.prototype.getOwneraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setOwneraddress = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float TotalStake = 9;
 * @return {number}
 */
proto.NodeExt2.prototype.getTotalstake = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setTotalstake = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string PubKey = 10;
 * @return {string}
 */
proto.NodeExt2.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string PubKeyMin = 11;
 * @return {string}
 */
proto.NodeExt2.prototype.getPubkeymin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setPubkeymin = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string ValidatorAddress = 12;
 * @return {string}
 */
proto.NodeExt2.prototype.getValidatoraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.NodeExt2.prototype.setValidatoraddress = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 Commission = 13;
 * @return {number}
 */
proto.NodeExt2.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setCommission = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 CreatedAtBlock = 14;
 * @return {number}
 */
proto.NodeExt2.prototype.getCreatedatblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setCreatedatblock = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 StatusInt = 15;
 * @return {number}
 */
proto.NodeExt2.prototype.getStatusint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setStatusint = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional Timestamp TimeUpdate = 16;
 * @return {?proto.Timestamp}
 */
proto.NodeExt2.prototype.getTimeupdate = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 16));
};


/** @param {?proto.Timestamp|undefined} value */
proto.NodeExt2.prototype.setTimeupdate = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.NodeExt2.prototype.clearTimeupdate = function() {
  this.setTimeupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NodeExt2.prototype.hasTimeupdate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated StakesInfo Stakes = 17;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.StakesInfo>}
 */
proto.NodeExt2.prototype.getStakesList = function() {
  return /** @type{!Array.<!proto.StakesInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StakesInfo, 17));
};


/** @param {!Array.<!proto.StakesInfo>} value */
proto.NodeExt2.prototype.setStakesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.StakesInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StakesInfo}
 */
proto.NodeExt2.prototype.addStakes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.StakesInfo, opt_index);
};


proto.NodeExt2.prototype.clearStakesList = function() {
  this.setStakesList([]);
};


/**
 * repeated BlocksStory Blocks = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.BlocksStory>}
 */
proto.NodeExt2.prototype.getBlocksList = function() {
  return /** @type{!Array.<!proto.BlocksStory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BlocksStory, 18));
};


/** @param {!Array.<!proto.BlocksStory>} value */
proto.NodeExt2.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.BlocksStory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BlocksStory}
 */
proto.NodeExt2.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.BlocksStory, opt_index);
};


proto.NodeExt2.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};


/**
 * optional uint64 AmntBlocks = 19;
 * @return {number}
 */
proto.NodeExt2.prototype.getAmntblocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setAmntblocks = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional int32 AmntSlashed = 20;
 * @return {number}
 */
proto.NodeExt2.prototype.getAmntslashed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setAmntslashed = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional int32 AmnNoBlocks = 21;
 * @return {number}
 */
proto.NodeExt2.prototype.getAmnnoblocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setAmnnoblocks = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional int32 AmntSlots = 22;
 * @return {number}
 */
proto.NodeExt2.prototype.getAmntslots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setAmntslots = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional int32 CommissionNow = 23;
 * @return {number}
 */
proto.NodeExt2.prototype.getCommissionnow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.NodeExt2.prototype.setCommissionnow = function(value) {
  jspb.Message.setField(this, 23, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StakesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StakesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StakesInfo.displayName = 'proto.StakesInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StakesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.StakesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StakesInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.StakesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    bipvalue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StakesInfo}
 */
proto.StakesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StakesInfo;
  return proto.StakesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StakesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StakesInfo}
 */
proto.StakesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBipvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.StakesInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.StakesInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StakesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.StakesInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOwner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCoin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getBipvalue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string Owner = 1;
 * @return {string}
 */
proto.StakesInfo.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StakesInfo.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Coin = 2;
 * @return {string}
 */
proto.StakesInfo.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.StakesInfo.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float Value = 3;
 * @return {number}
 */
proto.StakesInfo.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.StakesInfo.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float BipValue = 4;
 * @return {number}
 */
proto.StakesInfo.prototype.getBipvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.StakesInfo.prototype.setBipvalue = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlocksStory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlocksStory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlocksStory.displayName = 'proto.BlocksStory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlocksStory.prototype.toObject = function(opt_includeInstance) {
  return proto.BlocksStory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlocksStory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BlocksStory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlocksStory}
 */
proto.BlocksStory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlocksStory;
  return proto.BlocksStory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlocksStory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlocksStory}
 */
proto.BlocksStory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BlocksStory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksStory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlocksStory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksStory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.BlocksStory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlocksStory.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.BlocksStory.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BlocksStory.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResReward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResReward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResReward.displayName = 'proto.ResReward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResReward.prototype.toObject = function(opt_includeInstance) {
  return proto.ResReward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResReward} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ResReward.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pubkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amnt: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResReward}
 */
proto.ResReward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResReward;
  return proto.ResReward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResReward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResReward}
 */
proto.ResReward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ResReward} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ResReward.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResReward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ResReward.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAmnt();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string Role = 1;
 * @return {string}
 */
proto.ResReward.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ResReward.prototype.setRole = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Address = 2;
 * @return {string}
 */
proto.ResReward.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ResReward.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string PubKey = 3;
 * @return {string}
 */
proto.ResReward.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ResReward.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float Amnt = 4;
 * @return {number}
 */
proto.ResReward.prototype.getAmnt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.ResReward.prototype.setAmnt = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlocksListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlocksListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlocksListReq.displayName = 'proto.BlocksListReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlocksListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.BlocksListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlocksListReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BlocksListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlocksListReq}
 */
proto.BlocksListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlocksListReq;
  return proto.BlocksListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlocksListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlocksListReq}
 */
proto.BlocksListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BlocksListReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksListReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlocksListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksListReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Page = 1;
 * @return {number}
 */
proto.BlocksListReq.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BlocksListReq.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlocksListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlocksListResp.repeatedFields_, null);
};
goog.inherits(proto.BlocksListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlocksListResp.displayName = 'proto.BlocksListResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlocksListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlocksListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.BlocksListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlocksListResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BlocksListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    allblocksList: jspb.Message.toObjectList(msg.getAllblocksList(),
    proto.Block1.toObject, includeInstance),
    totalblock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minblock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxblock: jspb.Message.getFieldWithDefault(msg, 4, 0),
    btnll: jspb.Message.getFieldWithDefault(msg, 5, 0),
    btnl: jspb.Message.getFieldWithDefault(msg, 6, 0),
    btnr: jspb.Message.getFieldWithDefault(msg, 7, 0),
    btnrr: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlocksListResp}
 */
proto.BlocksListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlocksListResp;
  return proto.BlocksListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlocksListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlocksListResp}
 */
proto.BlocksListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Block1;
      reader.readMessage(value,proto.Block1.deserializeBinaryFromReader);
      msg.addAllblocks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalblock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinblock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxblock(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnll(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnrr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BlocksListResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksListResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlocksListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BlocksListResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAllblocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Block1.serializeBinaryToWriter
    );
  }
  f = this.getTotalblock();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getMinblock();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getMaxblock();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getBtnll();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getBtnl();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getBtnr();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getBtnrr();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * repeated Block1 AllBlocks = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Block1>}
 */
proto.BlocksListResp.prototype.getAllblocksList = function() {
  return /** @type{!Array.<!proto.Block1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block1, 1));
};


/** @param {!Array.<!proto.Block1>} value */
proto.BlocksListResp.prototype.setAllblocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Block1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block1}
 */
proto.BlocksListResp.prototype.addAllblocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Block1, opt_index);
};


proto.BlocksListResp.prototype.clearAllblocksList = function() {
  this.setAllblocksList([]);
};


/**
 * optional uint32 TotalBlock = 2;
 * @return {number}
 */
proto.BlocksListResp.prototype.getTotalblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setTotalblock = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 MinBlock = 3;
 * @return {number}
 */
proto.BlocksListResp.prototype.getMinblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setMinblock = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 MaxBlock = 4;
 * @return {number}
 */
proto.BlocksListResp.prototype.getMaxblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setMaxblock = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 BtnLL = 5;
 * @return {number}
 */
proto.BlocksListResp.prototype.getBtnll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setBtnll = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 BtnL = 6;
 * @return {number}
 */
proto.BlocksListResp.prototype.getBtnl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setBtnl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 BtnR = 7;
 * @return {number}
 */
proto.BlocksListResp.prototype.getBtnr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setBtnr = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 BtnRR = 8;
 * @return {number}
 */
proto.BlocksListResp.prototype.getBtnrr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BlocksListResp.prototype.setBtnrr = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxsListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TrxsListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxsListReq.displayName = 'proto.TrxsListReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxsListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxsListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxsListReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TrxsListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxsListReq}
 */
proto.TrxsListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxsListReq;
  return proto.TrxsListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxsListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxsListReq}
 */
proto.TrxsListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TrxsListReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxsListReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxsListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxsListReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Page = 1;
 * @return {number}
 */
proto.TrxsListReq.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TrxsListReq.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TrxsListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TrxsListResp.repeatedFields_, null);
};
goog.inherits(proto.TrxsListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TrxsListResp.displayName = 'proto.TrxsListResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TrxsListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TrxsListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.TrxsListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TrxsListResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TrxsListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    alltrnsList: jspb.Message.toObjectList(msg.getAlltrnsList(),
    proto.Trans1.toObject, includeInstance),
    totalblock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    btnnow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    btnl: jspb.Message.getFieldWithDefault(msg, 4, 0),
    btnr: jspb.Message.getFieldWithDefault(msg, 5, 0),
    btnrr: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TrxsListResp}
 */
proto.TrxsListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TrxsListResp;
  return proto.TrxsListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TrxsListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TrxsListResp}
 */
proto.TrxsListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Trans1;
      reader.readMessage(value,proto.Trans1.deserializeBinaryFromReader);
      msg.addAlltrns(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalblock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnnow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnrr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TrxsListResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxsListResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TrxsListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TrxsListResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAlltrnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Trans1.serializeBinaryToWriter
    );
  }
  f = this.getTotalblock();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBtnnow();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getBtnl();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getBtnr();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getBtnrr();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * repeated Trans1 AllTrns = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Trans1>}
 */
proto.TrxsListResp.prototype.getAlltrnsList = function() {
  return /** @type{!Array.<!proto.Trans1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Trans1, 1));
};


/** @param {!Array.<!proto.Trans1>} value */
proto.TrxsListResp.prototype.setAlltrnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Trans1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Trans1}
 */
proto.TrxsListResp.prototype.addAlltrns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Trans1, opt_index);
};


proto.TrxsListResp.prototype.clearAlltrnsList = function() {
  this.setAlltrnsList([]);
};


/**
 * optional uint32 TotalBlock = 2;
 * @return {number}
 */
proto.TrxsListResp.prototype.getTotalblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TrxsListResp.prototype.setTotalblock = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 BtnNow = 3;
 * @return {number}
 */
proto.TrxsListResp.prototype.getBtnnow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TrxsListResp.prototype.setBtnnow = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 BtnL = 4;
 * @return {number}
 */
proto.TrxsListResp.prototype.getBtnl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TrxsListResp.prototype.setBtnl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 BtnR = 5;
 * @return {number}
 */
proto.TrxsListResp.prototype.getBtnr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TrxsListResp.prototype.setBtnr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 BtnRR = 6;
 * @return {number}
 */
proto.TrxsListResp.prototype.getBtnrr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TrxsListResp.prototype.setBtnrr = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NodesListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NodesListResp.repeatedFields_, null);
};
goog.inherits(proto.NodesListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NodesListResp.displayName = 'proto.NodesListResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NodesListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NodesListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.NodesListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NodesListResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NodesListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    allcandidatesList: jspb.Message.toObjectList(msg.getAllcandidatesList(),
    proto.NodeExt2.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NodesListResp}
 */
proto.NodesListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NodesListResp;
  return proto.NodesListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NodesListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NodesListResp}
 */
proto.NodesListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NodeExt2;
      reader.readMessage(value,proto.NodeExt2.deserializeBinaryFromReader);
      msg.addAllcandidates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NodesListResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodesListResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NodesListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NodesListResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAllcandidatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.NodeExt2.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeExt2 AllCandidates = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.NodeExt2>}
 */
proto.NodesListResp.prototype.getAllcandidatesList = function() {
  return /** @type{!Array.<!proto.NodeExt2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NodeExt2, 1));
};


/** @param {!Array.<!proto.NodeExt2>} value */
proto.NodesListResp.prototype.setAllcandidatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.NodeExt2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NodeExt2}
 */
proto.NodesListResp.prototype.addAllcandidates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.NodeExt2, opt_index);
};


proto.NodesListResp.prototype.clearAllcandidatesList = function() {
  this.setAllcandidatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinsListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CoinsListResp.repeatedFields_, null);
};
goog.inherits(proto.CoinsListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinsListResp.displayName = 'proto.CoinsListResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CoinsListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinsListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinsListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinsListResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinsListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    allcoinsList: jspb.Message.toObjectList(msg.getAllcoinsList(),
    proto.CoinView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinsListResp}
 */
proto.CoinsListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinsListResp;
  return proto.CoinsListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinsListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinsListResp}
 */
proto.CoinsListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CoinView;
      reader.readMessage(value,proto.CoinView.deserializeBinaryFromReader);
      msg.addAllcoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinsListResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinsListResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinsListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinsListResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAllcoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CoinView.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CoinView AllCoins = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.CoinView>}
 */
proto.CoinsListResp.prototype.getAllcoinsList = function() {
  return /** @type{!Array.<!proto.CoinView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CoinView, 1));
};


/** @param {!Array.<!proto.CoinView>} value */
proto.CoinsListResp.prototype.setAllcoinsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CoinView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CoinView}
 */
proto.CoinsListResp.prototype.addAllcoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CoinView, opt_index);
};


proto.CoinsListResp.prototype.clearAllcoinsList = function() {
  this.setAllcoinsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoinView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinView.displayName = 'proto.CoinView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinView.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinView} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinView.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    coinlogoimg: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pricebuy: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pricebuyusd: jspb.Message.getFieldWithDefault(msg, 6, ""),
    volume24: jspb.Message.getFieldWithDefault(msg, 7, ""),
    change24: jspb.Message.getFieldWithDefault(msg, 8, ""),
    change24f32: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinView}
 */
proto.CoinView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinView;
  return proto.CoinView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinView}
 */
proto.CoinView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinlogoimg(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPricebuy(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPricebuyusd(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume24(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setChange24(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChange24f32(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinView} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinView.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinView.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTicker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCoinlogoimg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPricebuy();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPricebuyusd();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getVolume24();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getChange24();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getChange24f32();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional int32 ID = 1;
 * @return {number}
 */
proto.CoinView.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CoinView.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.CoinView.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Ticker = 3;
 * @return {string}
 */
proto.CoinView.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setTicker = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string CoinLogoImg = 4;
 * @return {string}
 */
proto.CoinView.prototype.getCoinlogoimg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setCoinlogoimg = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string PriceBuy = 5;
 * @return {string}
 */
proto.CoinView.prototype.getPricebuy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setPricebuy = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string PriceBuyUSD = 6;
 * @return {string}
 */
proto.CoinView.prototype.getPricebuyusd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setPricebuyusd = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Volume24 = 7;
 * @return {string}
 */
proto.CoinView.prototype.getVolume24 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setVolume24 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string Change24 = 8;
 * @return {string}
 */
proto.CoinView.prototype.getChange24 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.CoinView.prototype.setChange24 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float Change24f32 = 9;
 * @return {number}
 */
proto.CoinView.prototype.getChange24f32 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.CoinView.prototype.setChange24f32 = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinReq.displayName = 'proto.CoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticker2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinReq}
 */
proto.CoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinReq;
  return proto.CoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinReq}
 */
proto.CoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTicker1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTicker2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Ticker1 = 1;
 * @return {string}
 */
proto.CoinReq.prototype.getTicker1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoinReq.prototype.setTicker1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ticker2 = 2;
 * @return {string}
 */
proto.CoinReq.prototype.getTicker2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CoinReq.prototype.setTicker2 = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CoinResp.repeatedFields_, null);
};
goog.inherits(proto.CoinResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinResp.displayName = 'proto.CoinResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CoinResp.repeatedFields_ = [4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinResp.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedata: (f = msg.getUpdatedata()) && proto.Timestamp.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.Timestamp.toObject(includeInstance, f),
    titlecoin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.OneCoinTrans.toObject, includeInstance),
    ticker1: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ticker2: jspb.Message.getFieldWithDefault(msg, 6, ""),
    other2coinsList: jspb.Message.getField(msg, 7),
    pricenowbuy: jspb.Message.getFieldWithDefault(msg, 8, ""),
    pricenowsell: jspb.Message.getFieldWithDefault(msg, 9, ""),
    change24: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    volume24: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    mycoin: jspb.Message.getFieldWithDefault(msg, 12, false),
    creator: jspb.Message.getFieldWithDefault(msg, 13, ""),
    creatortxt: jspb.Message.getFieldWithDefault(msg, 14, ""),
    crrPrc: jspb.Message.getFieldWithDefault(msg, 15, 0),
    initialamount: jspb.Message.getFieldWithDefault(msg, 16, ""),
    initialreserve: jspb.Message.getFieldWithDefault(msg, 17, ""),
    volume: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    reservebalance: jspb.Message.getFieldWithDefault(msg, 19, ""),
    coininf: (f = msg.getCoininf()) && proto.CoinMarketCapData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinResp}
 */
proto.CoinResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinResp;
  return proto.CoinResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinResp}
 */
proto.CoinResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedata(value);
      break;
    case 2:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitlecoin(value);
      break;
    case 4:
      var value = new proto.OneCoinTrans;
      reader.readMessage(value,proto.OneCoinTrans.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker1(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker2(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addOther2coins(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPricenowbuy(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPricenowsell(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChange24(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume24(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMycoin(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatortxt(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrrPrc(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialamount(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialreserve(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservebalance(value);
      break;
    case 20:
      var value = new proto.CoinMarketCapData;
      reader.readMessage(value,proto.CoinMarketCapData.deserializeBinaryFromReader);
      msg.setCoininf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUpdatedata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getTitlecoin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.OneCoinTrans.serializeBinaryToWriter
    );
  }
  f = this.getTicker1();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getTicker2();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getOther2coinsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = this.getPricenowbuy();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getPricenowsell();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getChange24();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = this.getVolume24();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = this.getMycoin();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getCreator();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getCreatortxt();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getCrrPrc();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = this.getInitialamount();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getInitialreserve();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = this.getReservebalance();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getCoininf();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.CoinMarketCapData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timestamp UpdateData = 1;
 * @return {?proto.Timestamp}
 */
proto.CoinResp.prototype.getUpdatedata = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 1));
};


/** @param {?proto.Timestamp|undefined} value */
proto.CoinResp.prototype.setUpdatedata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CoinResp.prototype.clearUpdatedata = function() {
  this.setUpdatedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinResp.prototype.hasUpdatedata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timestamp Time = 2;
 * @return {?proto.Timestamp}
 */
proto.CoinResp.prototype.getTime = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 2));
};


/** @param {?proto.Timestamp|undefined} value */
proto.CoinResp.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CoinResp.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinResp.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string TitleCoin = 3;
 * @return {string}
 */
proto.CoinResp.prototype.getTitlecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setTitlecoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated OneCoinTrans Transactions = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.OneCoinTrans>}
 */
proto.CoinResp.prototype.getTransactionsList = function() {
  return /** @type{!Array.<!proto.OneCoinTrans>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OneCoinTrans, 4));
};


/** @param {!Array.<!proto.OneCoinTrans>} value */
proto.CoinResp.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.OneCoinTrans=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OneCoinTrans}
 */
proto.CoinResp.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.OneCoinTrans, opt_index);
};


proto.CoinResp.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * optional string Ticker1 = 5;
 * @return {string}
 */
proto.CoinResp.prototype.getTicker1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setTicker1 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Ticker2 = 6;
 * @return {string}
 */
proto.CoinResp.prototype.getTicker2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setTicker2 = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated string Other2Coins = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.CoinResp.prototype.getOther2coinsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<string>} value */
proto.CoinResp.prototype.setOther2coinsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.CoinResp.prototype.addOther2coins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.CoinResp.prototype.clearOther2coinsList = function() {
  this.setOther2coinsList([]);
};


/**
 * optional string PriceNowBuy = 8;
 * @return {string}
 */
proto.CoinResp.prototype.getPricenowbuy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setPricenowbuy = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string PriceNowSell = 9;
 * @return {string}
 */
proto.CoinResp.prototype.getPricenowsell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setPricenowsell = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional float Change24 = 10;
 * @return {number}
 */
proto.CoinResp.prototype.getChange24 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.CoinResp.prototype.setChange24 = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float Volume24 = 11;
 * @return {number}
 */
proto.CoinResp.prototype.getVolume24 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.CoinResp.prototype.setVolume24 = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool MyCoin = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CoinResp.prototype.getMycoin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.CoinResp.prototype.setMycoin = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string Creator = 13;
 * @return {string}
 */
proto.CoinResp.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setCreator = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string CreatorTXT = 14;
 * @return {string}
 */
proto.CoinResp.prototype.getCreatortxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setCreatortxt = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional int32 CRR_prc = 15;
 * @return {number}
 */
proto.CoinResp.prototype.getCrrPrc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.CoinResp.prototype.setCrrPrc = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string InitialAmount = 16;
 * @return {string}
 */
proto.CoinResp.prototype.getInitialamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setInitialamount = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string InitialReserve = 17;
 * @return {string}
 */
proto.CoinResp.prototype.getInitialreserve = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setInitialreserve = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional float Volume = 18;
 * @return {number}
 */
proto.CoinResp.prototype.getVolume = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.CoinResp.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string ReserveBalance = 19;
 * @return {string}
 */
proto.CoinResp.prototype.getReservebalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.CoinResp.prototype.setReservebalance = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional CoinMarketCapData CoinInf = 20;
 * @return {?proto.CoinMarketCapData}
 */
proto.CoinResp.prototype.getCoininf = function() {
  return /** @type{?proto.CoinMarketCapData} */ (
    jspb.Message.getWrapperField(this, proto.CoinMarketCapData, 20));
};


/** @param {?proto.CoinMarketCapData|undefined} value */
proto.CoinResp.prototype.setCoininf = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.CoinResp.prototype.clearCoininf = function() {
  this.setCoininf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinResp.prototype.hasCoininf = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OneCoinTrans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OneCoinTrans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OneCoinTrans.displayName = 'proto.OneCoinTrans';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OneCoinTrans.prototype.toObject = function(opt_includeInstance) {
  return proto.OneCoinTrans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OneCoinTrans} msg The msg instance to transform.
 * @return {!Object}
 */
proto.OneCoinTrans.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, ""),
    open: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    high: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    low: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    close: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    volume: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OneCoinTrans}
 */
proto.OneCoinTrans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OneCoinTrans;
  return proto.OneCoinTrans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OneCoinTrans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OneCoinTrans}
 */
proto.OneCoinTrans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHigh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLow(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setClose(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.OneCoinTrans} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.OneCoinTrans.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OneCoinTrans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.OneCoinTrans.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOpen();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getHigh();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getLow();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getClose();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional string Date = 1;
 * @return {string}
 */
proto.OneCoinTrans.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OneCoinTrans.prototype.setDate = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float Open = 2;
 * @return {number}
 */
proto.OneCoinTrans.prototype.getOpen = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.OneCoinTrans.prototype.setOpen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float High = 3;
 * @return {number}
 */
proto.OneCoinTrans.prototype.getHigh = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.OneCoinTrans.prototype.setHigh = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float Low = 4;
 * @return {number}
 */
proto.OneCoinTrans.prototype.getLow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.OneCoinTrans.prototype.setLow = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float Close = 5;
 * @return {number}
 */
proto.OneCoinTrans.prototype.getClose = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.OneCoinTrans.prototype.setClose = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float Volume = 6;
 * @return {number}
 */
proto.OneCoinTrans.prototype.getVolume = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.OneCoinTrans.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinMarketCapData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CoinMarketCapData.repeatedFields_, null);
};
goog.inherits(proto.CoinMarketCapData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinMarketCapData.displayName = 'proto.CoinMarketCapData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CoinMarketCapData.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinMarketCapData.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinMarketCapData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinMarketCapData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinMarketCapData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coinsymbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    coinurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    coinlogoimg: jspb.Message.getFieldWithDefault(msg, 4, ""),
    coindesc: jspb.Message.getFieldWithDefault(msg, 5, ""),
    time: (f = msg.getTime()) && proto.Timestamp.toObject(includeInstance, f),
    timeupdate: (f = msg.getTimeupdate()) && proto.Timestamp.toObject(includeInstance, f),
    initialamount: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    initialreserve: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    constantreserveratio: jspb.Message.getFieldWithDefault(msg, 10, 0),
    volumenow: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    reservebalancenow: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    creator: jspb.Message.getFieldWithDefault(msg, 13, ""),
    amnttrans24x7: jspb.Message.getFieldWithDefault(msg, 14, 0),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.CoinActionpData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinMarketCapData}
 */
proto.CoinMarketCapData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinMarketCapData;
  return proto.CoinMarketCapData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinMarketCapData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinMarketCapData}
 */
proto.CoinMarketCapData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinsymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinlogoimg(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoindesc(value);
      break;
    case 6:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 7:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTimeupdate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitialamount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitialreserve(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConstantreserveratio(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolumenow(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReservebalancenow(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmnttrans24x7(value);
      break;
    case 15:
      var value = new proto.CoinActionpData;
      reader.readMessage(value,proto.CoinActionpData.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinMarketCapData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinMarketCapData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinMarketCapData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinMarketCapData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCoinsymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCoinurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCoinlogoimg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCoindesc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getTimeupdate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getInitialamount();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = this.getInitialreserve();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getConstantreserveratio();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = this.getVolumenow();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = this.getReservebalancenow();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = this.getCreator();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getAmnttrans24x7();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.CoinActionpData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string CoinSymbol = 2;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getCoinsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setCoinsymbol = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string CoinURL = 3;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getCoinurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setCoinurl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string CoinLogoImg = 4;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getCoinlogoimg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setCoinlogoimg = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string CoinDesc = 5;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getCoindesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setCoindesc = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Timestamp Time = 6;
 * @return {?proto.Timestamp}
 */
proto.CoinMarketCapData.prototype.getTime = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 6));
};


/** @param {?proto.Timestamp|undefined} value */
proto.CoinMarketCapData.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.CoinMarketCapData.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinMarketCapData.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Timestamp TimeUpdate = 7;
 * @return {?proto.Timestamp}
 */
proto.CoinMarketCapData.prototype.getTimeupdate = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 7));
};


/** @param {?proto.Timestamp|undefined} value */
proto.CoinMarketCapData.prototype.setTimeupdate = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.CoinMarketCapData.prototype.clearTimeupdate = function() {
  this.setTimeupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinMarketCapData.prototype.hasTimeupdate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float InitialAmount = 8;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getInitialamount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setInitialamount = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float InitialReserve = 9;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getInitialreserve = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setInitialreserve = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 ConstantReserveRatio = 10;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getConstantreserveratio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setConstantreserveratio = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float VolumeNow = 11;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getVolumenow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setVolumenow = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float ReserveBalanceNow = 12;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getReservebalancenow = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setReservebalancenow = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string Creator = 13;
 * @return {string}
 */
proto.CoinMarketCapData.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.CoinMarketCapData.prototype.setCreator = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 AmntTrans24x7 = 14;
 * @return {number}
 */
proto.CoinMarketCapData.prototype.getAmnttrans24x7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.CoinMarketCapData.prototype.setAmnttrans24x7 = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * repeated CoinActionpData Transactions = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.CoinActionpData>}
 */
proto.CoinMarketCapData.prototype.getTransactionsList = function() {
  return /** @type{!Array.<!proto.CoinActionpData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CoinActionpData, 15));
};


/** @param {!Array.<!proto.CoinActionpData>} value */
proto.CoinMarketCapData.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.CoinActionpData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CoinActionpData}
 */
proto.CoinMarketCapData.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.CoinActionpData, opt_index);
};


proto.CoinMarketCapData.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinActionpData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoinActionpData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinActionpData.displayName = 'proto.CoinActionpData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinActionpData.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinActionpData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinActionpData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinActionpData.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && proto.Timestamp.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cointobuy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cointosell: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuetobuy: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    valuetosell: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    price: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    volume: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinActionpData}
 */
proto.CoinActionpData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinActionpData;
  return proto.CoinActionpData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinActionpData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinActionpData}
 */
proto.CoinActionpData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCointobuy(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCointosell(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValuetobuy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValuetosell(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinActionpData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinActionpData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinActionpData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinActionpData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getCointobuy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCointosell();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getValuetobuy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = this.getValuetosell();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = this.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional string Hash = 1;
 * @return {string}
 */
proto.CoinActionpData.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoinActionpData.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Timestamp Time = 2;
 * @return {?proto.Timestamp}
 */
proto.CoinActionpData.prototype.getTime = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 2));
};


/** @param {?proto.Timestamp|undefined} value */
proto.CoinActionpData.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CoinActionpData.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CoinActionpData.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 Type = 3;
 * @return {number}
 */
proto.CoinActionpData.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CoinActionpData.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string CoinToBuy = 4;
 * @return {string}
 */
proto.CoinActionpData.prototype.getCointobuy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CoinActionpData.prototype.setCointobuy = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string CoinToSell = 5;
 * @return {string}
 */
proto.CoinActionpData.prototype.getCointosell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CoinActionpData.prototype.setCointosell = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float ValueToBuy = 6;
 * @return {number}
 */
proto.CoinActionpData.prototype.getValuetobuy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.CoinActionpData.prototype.setValuetobuy = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float ValueToSell = 7;
 * @return {number}
 */
proto.CoinActionpData.prototype.getValuetosell = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.CoinActionpData.prototype.setValuetosell = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float Price = 8;
 * @return {number}
 */
proto.CoinActionpData.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.CoinActionpData.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float Volume = 9;
 * @return {number}
 */
proto.CoinActionpData.prototype.getVolume = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.CoinActionpData.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WalletListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletListReq.displayName = 'proto.WalletListReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletListReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallet: jspb.Message.getFieldWithDefault(msg, 1, ""),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletListReq}
 */
proto.WalletListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletListReq;
  return proto.WalletListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletListReq}
 */
proto.WalletListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWallet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletListReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletListReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletListReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWallet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string Wallet = 1;
 * @return {string}
 */
proto.WalletListReq.prototype.getWallet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WalletListReq.prototype.setWallet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 Page = 2;
 * @return {number}
 */
proto.WalletListReq.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WalletListReq.prototype.setPage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TasksListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TasksListResp.repeatedFields_, null);
};
goog.inherits(proto.TasksListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TasksListResp.displayName = 'proto.TasksListResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TasksListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TasksListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.TasksListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TasksListResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TasksListResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.TaskOne.toObject, includeInstance),
    btnnow: jspb.Message.getFieldWithDefault(msg, 2, 0),
    btnl: jspb.Message.getFieldWithDefault(msg, 3, 0),
    btnr: jspb.Message.getFieldWithDefault(msg, 4, 0),
    btnrr: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TasksListResp}
 */
proto.TasksListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TasksListResp;
  return proto.TasksListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TasksListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TasksListResp}
 */
proto.TasksListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TaskOne;
      reader.readMessage(value,proto.TaskOne.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnnow(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBtnrr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TasksListResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TasksListResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TasksListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TasksListResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TaskOne.serializeBinaryToWriter
    );
  }
  f = this.getBtnnow();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBtnl();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getBtnr();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getBtnrr();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated TaskOne List = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TaskOne>}
 */
proto.TasksListResp.prototype.getListList = function() {
  return /** @type{!Array.<!proto.TaskOne>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TaskOne, 1));
};


/** @param {!Array.<!proto.TaskOne>} value */
proto.TasksListResp.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TaskOne=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TaskOne}
 */
proto.TasksListResp.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TaskOne, opt_index);
};


proto.TasksListResp.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional uint32 BtnNow = 2;
 * @return {number}
 */
proto.TasksListResp.prototype.getBtnnow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TasksListResp.prototype.setBtnnow = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 BtnL = 3;
 * @return {number}
 */
proto.TasksListResp.prototype.getBtnl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TasksListResp.prototype.setBtnl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 BtnR = 4;
 * @return {number}
 */
proto.TasksListResp.prototype.getBtnr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TasksListResp.prototype.setBtnr = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 BtnRR = 5;
 * @return {number}
 */
proto.TasksListResp.prototype.getBtnrr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TasksListResp.prototype.setBtnrr = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WalletReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletReq.displayName = 'proto.WalletReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletReq.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallet: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletReq}
 */
proto.WalletReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletReq;
  return proto.WalletReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletReq}
 */
proto.WalletReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWallet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWallet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Wallet = 1;
 * @return {string}
 */
proto.WalletReq.prototype.getWallet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WalletReq.prototype.setWallet = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WalletResp.repeatedFields_, null);
};
goog.inherits(proto.WalletResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletResp.displayName = 'proto.WalletResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WalletResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletResp.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletcoinsList: jspb.Message.toObjectList(msg.getWalletcoinsList(),
    proto.WalletCoin1.toObject, includeInstance),
    totalamntinbasecoin: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletResp}
 */
proto.WalletResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletResp;
  return proto.WalletResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletResp}
 */
proto.WalletResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WalletCoin1;
      reader.readMessage(value,proto.WalletCoin1.deserializeBinaryFromReader);
      msg.addWalletcoins(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalamntinbasecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWalletcoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WalletCoin1.serializeBinaryToWriter
    );
  }
  f = this.getTotalamntinbasecoin();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated WalletCoin1 WalletCoins = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WalletCoin1>}
 */
proto.WalletResp.prototype.getWalletcoinsList = function() {
  return /** @type{!Array.<!proto.WalletCoin1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WalletCoin1, 1));
};


/** @param {!Array.<!proto.WalletCoin1>} value */
proto.WalletResp.prototype.setWalletcoinsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WalletCoin1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WalletCoin1}
 */
proto.WalletResp.prototype.addWalletcoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WalletCoin1, opt_index);
};


proto.WalletResp.prototype.clearWalletcoinsList = function() {
  this.setWalletcoinsList([]);
};


/**
 * optional uint32 TotalAmntInBaseCoin = 2;
 * @return {number}
 */
proto.WalletResp.prototype.getTotalamntinbasecoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WalletResp.prototype.setTotalamntinbasecoin = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletCoin1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WalletCoin1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletCoin1.displayName = 'proto.WalletCoin1';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletCoin1.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletCoin1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletCoin1} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletCoin1.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amnt: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletCoin1}
 */
proto.WalletCoin1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletCoin1;
  return proto.WalletCoin1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletCoin1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletCoin1}
 */
proto.WalletCoin1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletCoin1} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletCoin1.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletCoin1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletCoin1.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAmnt();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string Ticker = 1;
 * @return {string}
 */
proto.WalletCoin1.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WalletCoin1.prototype.setTicker = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float Amnt = 2;
 * @return {number}
 */
proto.WalletCoin1.prototype.getAmnt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.WalletCoin1.prototype.setAmnt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletRewardsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WalletRewardsResp.repeatedFields_, null);
};
goog.inherits(proto.WalletRewardsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletRewardsResp.displayName = 'proto.WalletRewardsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WalletRewardsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletRewardsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletRewardsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletRewardsResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletRewardsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    allrewardList: jspb.Message.toObjectList(msg.getAllrewardList(),
    proto.ResReward.toObject, includeInstance),
    totalreward: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletRewardsResp}
 */
proto.WalletRewardsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletRewardsResp;
  return proto.WalletRewardsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletRewardsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletRewardsResp}
 */
proto.WalletRewardsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ResReward;
      reader.readMessage(value,proto.ResReward.deserializeBinaryFromReader);
      msg.addAllreward(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalreward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletRewardsResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletRewardsResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletRewardsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletRewardsResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAllrewardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ResReward.serializeBinaryToWriter
    );
  }
  f = this.getTotalreward();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated ResReward AllReward = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ResReward>}
 */
proto.WalletRewardsResp.prototype.getAllrewardList = function() {
  return /** @type{!Array.<!proto.ResReward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ResReward, 1));
};


/** @param {!Array.<!proto.ResReward>} value */
proto.WalletRewardsResp.prototype.setAllrewardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ResReward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ResReward}
 */
proto.WalletRewardsResp.prototype.addAllreward = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ResReward, opt_index);
};


proto.WalletRewardsResp.prototype.clearAllrewardList = function() {
  this.setAllrewardList([]);
};


/**
 * optional float TotalReward = 2;
 * @return {number}
 */
proto.WalletRewardsResp.prototype.getTotalreward = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.WalletRewardsResp.prototype.setTotalreward = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WalletDelegateResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WalletDelegateResp.repeatedFields_, null);
};
goog.inherits(proto.WalletDelegateResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WalletDelegateResp.displayName = 'proto.WalletDelegateResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WalletDelegateResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WalletDelegateResp.prototype.toObject = function(opt_includeInstance) {
  return proto.WalletDelegateResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WalletDelegateResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WalletDelegateResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    alldelegList: jspb.Message.toObjectList(msg.getAlldelegList(),
    proto.Delegate.toObject, includeInstance),
    totaldelegate: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WalletDelegateResp}
 */
proto.WalletDelegateResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WalletDelegateResp;
  return proto.WalletDelegateResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WalletDelegateResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WalletDelegateResp}
 */
proto.WalletDelegateResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Delegate;
      reader.readMessage(value,proto.Delegate.deserializeBinaryFromReader);
      msg.addAlldeleg(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotaldelegate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.WalletDelegateResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletDelegateResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WalletDelegateResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.WalletDelegateResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAlldelegList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Delegate.serializeBinaryToWriter
    );
  }
  f = this.getTotaldelegate();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated Delegate AllDeleg = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Delegate>}
 */
proto.WalletDelegateResp.prototype.getAlldelegList = function() {
  return /** @type{!Array.<!proto.Delegate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Delegate, 1));
};


/** @param {!Array.<!proto.Delegate>} value */
proto.WalletDelegateResp.prototype.setAlldelegList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Delegate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Delegate}
 */
proto.WalletDelegateResp.prototype.addAlldeleg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Delegate, opt_index);
};


proto.WalletDelegateResp.prototype.clearAlldelegList = function() {
  this.setAlldelegList([]);
};


/**
 * optional float TotalDelegate = 2;
 * @return {number}
 */
proto.WalletDelegateResp.prototype.getTotaldelegate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.WalletDelegateResp.prototype.setTotaldelegate = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Delegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Delegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Delegate.displayName = 'proto.Delegate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Delegate.prototype.toObject = function(opt_includeInstance) {
  return proto.Delegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Delegate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Delegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validatormin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    coin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    valuebip: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Delegate}
 */
proto.Delegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Delegate;
  return proto.Delegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Delegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Delegate}
 */
proto.Delegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatormin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValuebip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Delegate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Delegate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Delegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Delegate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValidatormin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCoin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getValuebip();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional string Validator = 1;
 * @return {string}
 */
proto.Delegate.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Delegate.prototype.setValidator = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ValidatorMin = 2;
 * @return {string}
 */
proto.Delegate.prototype.getValidatormin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Delegate.prototype.setValidatormin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Coin = 3;
 * @return {string}
 */
proto.Delegate.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Delegate.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float Value = 4;
 * @return {number}
 */
proto.Delegate.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Delegate.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float ValueBip = 5;
 * @return {number}
 */
proto.Delegate.prototype.getValuebip = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Delegate.prototype.setValuebip = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SyncResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncResp.displayName = 'proto.SyncResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncResp.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SyncResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastsync: jspb.Message.getFieldWithDefault(msg, 1, 0),
    current: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainnet: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncResp}
 */
proto.SyncResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncResp;
  return proto.SyncResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncResp}
 */
proto.SyncResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastsync(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SyncResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SyncResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SyncResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLastsync();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCurrent();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getChainnet();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 LastSync = 1;
 * @return {number}
 */
proto.SyncResp.prototype.getLastsync = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SyncResp.prototype.setLastsync = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 Current = 2;
 * @return {number}
 */
proto.SyncResp.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SyncResp.prototype.setCurrent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ChainNet = 3;
 * @return {string}
 */
proto.SyncResp.prototype.getChainnet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SyncResp.prototype.setChainnet = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoinBaseResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoinBaseResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoinBaseResp.displayName = 'proto.CoinBaseResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoinBaseResp.prototype.toObject = function(opt_includeInstance) {
  return proto.CoinBaseResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoinBaseResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CoinBaseResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoinBaseResp}
 */
proto.CoinBaseResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoinBaseResp;
  return proto.CoinBaseResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoinBaseResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoinBaseResp}
 */
proto.CoinBaseResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CoinBaseResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinBaseResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoinBaseResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CoinBaseResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Ticker = 1;
 * @return {string}
 */
proto.CoinBaseResp.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoinBaseResp.prototype.setTicker = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionResp.displayName = 'proto.ActionResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ActionResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, false),
    trxhash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errmsg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionResp}
 */
proto.ActionResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionResp;
  return proto.ActionResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionResp}
 */
proto.ActionResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrxhash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ActionResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ActionResp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ActionResp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getTrxhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool Status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ActionResp.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ActionResp.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string TrxHash = 2;
 * @return {string}
 */
proto.ActionResp.prototype.getTrxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ActionResp.prototype.setTrxhash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ErrMsg = 3;
 * @return {string}
 */
proto.ActionResp.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ActionResp.prototype.setErrmsg = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendCoinReq.displayName = 'proto.SendCoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.SendCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendCoinReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SendCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    feecoin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendCoinReq}
 */
proto.SendCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendCoinReq;
  return proto.SendCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendCoinReq}
 */
proto.SendCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeecoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SendCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SendCoinReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SendCoinReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCoin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFeecoin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.SendCoinReq.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SendCoinReq.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Coin = 2;
 * @return {string}
 */
proto.SendCoinReq.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SendCoinReq.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string FeeCoin = 3;
 * @return {string}
 */
proto.SendCoinReq.prototype.getFeecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SendCoinReq.prototype.setFeecoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float Value = 4;
 * @return {number}
 */
proto.SendCoinReq.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SendCoinReq.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DelegCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DelegCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DelegCoinReq.displayName = 'proto.DelegCoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DelegCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DelegCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DelegCoinReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DelegCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegcoin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valuedeleg: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    feecoin: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DelegCoinReq}
 */
proto.DelegCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DelegCoinReq;
  return proto.DelegCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DelegCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DelegCoinReq}
 */
proto.DelegCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegcoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValuedeleg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DelegCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelegCoinReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DelegCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelegCoinReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDelegcoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValidator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getValuedeleg();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getFeecoin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string DelegCoin = 1;
 * @return {string}
 */
proto.DelegCoinReq.prototype.getDelegcoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DelegCoinReq.prototype.setDelegcoin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Validator = 2;
 * @return {string}
 */
proto.DelegCoinReq.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DelegCoinReq.prototype.setValidator = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float ValueDeleg = 3;
 * @return {number}
 */
proto.DelegCoinReq.prototype.getValuedeleg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.DelegCoinReq.prototype.setValuedeleg = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string FeeCoin = 4;
 * @return {string}
 */
proto.DelegCoinReq.prototype.getFeecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DelegCoinReq.prototype.setFeecoin = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeclareNodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeclareNodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeclareNodeReq.displayName = 'proto.DeclareNodeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeclareNodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DeclareNodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeclareNodeReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DeclareNodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    taxcoin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    valuestart: jspb.Message.getFieldWithDefault(msg, 4, 0),
    feecoin: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeclareNodeReq}
 */
proto.DeclareNodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeclareNodeReq;
  return proto.DeclareNodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeclareNodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeclareNodeReq}
 */
proto.DeclareNodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setComm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxcoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValuestart(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DeclareNodeReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeclareNodeReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeclareNodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DeclareNodeReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getComm();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTaxcoin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getValuestart();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getFeecoin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Validator = 1;
 * @return {string}
 */
proto.DeclareNodeReq.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeclareNodeReq.prototype.setValidator = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 Comm = 2;
 * @return {number}
 */
proto.DeclareNodeReq.prototype.getComm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DeclareNodeReq.prototype.setComm = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string TaxCoin = 3;
 * @return {string}
 */
proto.DeclareNodeReq.prototype.getTaxcoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DeclareNodeReq.prototype.setTaxcoin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 ValueStart = 4;
 * @return {number}
 */
proto.DeclareNodeReq.prototype.getValuestart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DeclareNodeReq.prototype.setValuestart = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string FeeCoin = 5;
 * @return {string}
 */
proto.DeclareNodeReq.prototype.getFeecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DeclareNodeReq.prototype.setFeecoin = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartStopNodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StartStopNodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartStopNodeReq.displayName = 'proto.StartStopNodeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartStopNodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.StartStopNodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartStopNodeReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.StartStopNodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onoff: jspb.Message.getFieldWithDefault(msg, 2, false),
    feecoin: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartStopNodeReq}
 */
proto.StartStopNodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartStopNodeReq;
  return proto.StartStopNodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartStopNodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartStopNodeReq}
 */
proto.StartStopNodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnoff(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.StartStopNodeReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.StartStopNodeReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartStopNodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.StartStopNodeReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOnoff();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getFeecoin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Validator = 1;
 * @return {string}
 */
proto.StartStopNodeReq.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StartStopNodeReq.prototype.setValidator = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool OnOff = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.StartStopNodeReq.prototype.getOnoff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.StartStopNodeReq.prototype.setOnoff = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string FeeCoin = 3;
 * @return {string}
 */
proto.StartStopNodeReq.prototype.getFeecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.StartStopNodeReq.prototype.setFeecoin = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateCoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateCoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateCoinReq.displayName = 'proto.CreateCoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateCoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateCoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateCoinReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateCoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    namecoin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tickercoin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    initamnt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    initresrv: jspb.Message.getFieldWithDefault(msg, 4, 0),
    crr: jspb.Message.getFieldWithDefault(msg, 5, 0),
    feecoin: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateCoinReq}
 */
proto.CreateCoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateCoinReq;
  return proto.CreateCoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateCoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateCoinReq}
 */
proto.CreateCoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamecoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTickercoin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitamnt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitresrv(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCrr(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CreateCoinReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateCoinReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateCoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateCoinReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNamecoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTickercoin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getInitamnt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getInitresrv();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getCrr();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getFeecoin();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string NameCoin = 1;
 * @return {string}
 */
proto.CreateCoinReq.prototype.getNamecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateCoinReq.prototype.setNamecoin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string TickerCoin = 2;
 * @return {string}
 */
proto.CreateCoinReq.prototype.getTickercoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateCoinReq.prototype.setTickercoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 InitAmnt = 3;
 * @return {number}
 */
proto.CreateCoinReq.prototype.getInitamnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CreateCoinReq.prototype.setInitamnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 InitResrv = 4;
 * @return {number}
 */
proto.CreateCoinReq.prototype.getInitresrv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.CreateCoinReq.prototype.setInitresrv = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 CRR = 5;
 * @return {number}
 */
proto.CreateCoinReq.prototype.getCrr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CreateCoinReq.prototype.setCrr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string FeeCoin = 6;
 * @return {string}
 */
proto.CreateCoinReq.prototype.getFeecoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.CreateCoinReq.prototype.setFeecoin = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateCheckReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateCheckReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateCheckReq.displayName = 'proto.CreateCheckReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateCheckReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateCheckReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateCheckReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateCheckReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    pswrd: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateCheckReq}
 */
proto.CreateCheckReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateCheckReq;
  return proto.CreateCheckReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateCheckReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateCheckReq}
 */
proto.CreateCheckReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPswrd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CreateCheckReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateCheckReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateCheckReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateCheckReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getPswrd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string Coin = 1;
 * @return {string}
 */
proto.CreateCheckReq.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateCheckReq.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float Value = 2;
 * @return {number}
 */
proto.CreateCheckReq.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.CreateCheckReq.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Pswrd = 3;
 * @return {string}
 */
proto.CreateCheckReq.prototype.getPswrd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CreateCheckReq.prototype.setPswrd = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 Nonce = 4;
 * @return {number}
 */
proto.CreateCheckReq.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.CreateCheckReq.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RedeemCheckReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RedeemCheckReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RedeemCheckReq.displayName = 'proto.RedeemCheckReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RedeemCheckReq.prototype.toObject = function(opt_includeInstance) {
  return proto.RedeemCheckReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RedeemCheckReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RedeemCheckReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    check: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pswrd: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RedeemCheckReq}
 */
proto.RedeemCheckReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RedeemCheckReq;
  return proto.RedeemCheckReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RedeemCheckReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RedeemCheckReq}
 */
proto.RedeemCheckReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheck(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPswrd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RedeemCheckReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RedeemCheckReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RedeemCheckReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RedeemCheckReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCheck();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPswrd();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Check = 1;
 * @return {string}
 */
proto.RedeemCheckReq.prototype.getCheck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RedeemCheckReq.prototype.setCheck = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Pswrd = 2;
 * @return {string}
 */
proto.RedeemCheckReq.prototype.getPswrd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RedeemCheckReq.prototype.setPswrd = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewNodeInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewNodeInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewNodeInfoReq.displayName = 'proto.NewNodeInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewNodeInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.NewNodeInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewNodeInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NewNodeInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    www: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewNodeInfoReq}
 */
proto.NewNodeInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewNodeInfoReq;
  return proto.NewNodeInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewNodeInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewNodeInfoReq}
 */
proto.NewNodeInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWww(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NewNodeInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewNodeInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewNodeInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewNodeInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWww();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Title = 1;
 * @return {string}
 */
proto.NewNodeInfoReq.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NewNodeInfoReq.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string WWW = 2;
 * @return {string}
 */
proto.NewNodeInfoReq.prototype.getWww = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NewNodeInfoReq.prototype.setWww = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Description = 3;
 * @return {string}
 */
proto.NewNodeInfoReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NewNodeInfoReq.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Icon = 4;
 * @return {string}
 */
proto.NewNodeInfoReq.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.NewNodeInfoReq.prototype.setIcon = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewCoinInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewCoinInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewCoinInfoReq.displayName = 'proto.NewCoinInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewCoinInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.NewCoinInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewCoinInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NewCoinInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    www: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewCoinInfoReq}
 */
proto.NewCoinInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewCoinInfoReq;
  return proto.NewCoinInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewCoinInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewCoinInfoReq}
 */
proto.NewCoinInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWww(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NewCoinInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewCoinInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewCoinInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewCoinInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWww();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string WWW = 1;
 * @return {string}
 */
proto.NewCoinInfoReq.prototype.getWww = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NewCoinInfoReq.prototype.setWww = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.NewCoinInfoReq.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NewCoinInfoReq.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Icon = 3;
 * @return {string}
 */
proto.NewCoinInfoReq.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NewCoinInfoReq.prototype.setIcon = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto);
